###### Enums ######
_INPUT_Type_ = {
    "INPUT_MOUSE": 0,
    "INPUT_KEYBOARD": 1,
    "INPUT_HARDWARE": 2,
}
_INPUT_Type__INV = {
    0: "INPUT_MOUSE",
    1: "INPUT_KEYBOARD",
    2: "INPUT_HARDWARE",
}
_MSGFLTINFO_ = {
    "MSGFLTINFO_NONE": 0,
    "MSGFLTINFO_ALREADYALLOWED_FORWND": 1,
    "MSGFLTINFO_ALREADYDISALLOWED_FORWND": 2,
    "MSGFLTINFO_ALLOWED_HIGHER": 3,
}
_MSGFLTINFO__INV = {
    0: "MSGFLTINFO_NONE",
    1: "MSGFLTINFO_ALREADYALLOWED_FORWND",
    2: "MSGFLTINFO_ALREADYDISALLOWED_FORWND",
    3: "MSGFLTINFO_ALLOWED_HIGHER",
}
_CONVINFO_XTYP_ = {
    "XTYP_ERROR": 0x8002,
    "XTYP_ADVDATA": 0x4010,
    "XTYP_ADVREQ": 0x2022,
    "XTYP_ADVSTART": 0x1030,
    "XTYP_ADVSTOP": 0x8040,
    "XTYP_EXECUTE": 0x4050,
    "XTYP_CONNECT": 0x1062,
    "XTYP_MONITOR": 0x80F2,
    "XTYP_CONNECT_CONFIRM": 0x8072,
    "XTYP_XACT_COMPLETE": 0x8080,
    "XTYP_POKE": 0x4090,
    "XTYP_REGISTER": 0x80A2,
    "XTYP_REQUEST": 0x20B0,
    "XTYP_DISCONNECT": 0x80C2,
    "XTYP_UNREGISTER": 0x80D2,
    "XTYP_WILDCONNECT": 0x20E2,
}
_CONVINFO_XTYP__INV = {
    0x8002: "XTYP_ERROR",
    0x4010: "XTYP_ADVDATA",
    0x2022: "XTYP_ADVREQ",
    0x1030: "XTYP_ADVSTART",
    0x8040: "XTYP_ADVSTOP",
    0x4050: "XTYP_EXECUTE",
    0x1062: "XTYP_CONNECT",
    0x80F2: "XTYP_MONITOR",
    0x8072: "XTYP_CONNECT_CONFIRM",
    0x8080: "XTYP_XACT_COMPLETE",
    0x4090: "XTYP_POKE",
    0x80A2: "XTYP_REGISTER",
    0x20B0: "XTYP_REQUEST",
    0x80C2: "XTYP_DISCONNECT",
    0x80D2: "XTYP_UNREGISTER",
    0x20E2: "XTYP_WILDCONNECT",
}
_CONVINFO_STATUS_ = {
    "ST_CONNECTED": 0x0001,
    "ST_ADVISE": 0x0002,
    "ST_ISLOCAL": 0x0004,
    "ST_BLOCKED": 0x0008,
    "ST_CLIENT": 0x0010,
    "ST_TERMINATED": 0x0020,
    "ST_INLIST": 0x0040,
    "ST_BLOCKNEXT": 0x0080,
    "ST_ISSELF": 0x0100,
}
_CONVINFO_STATUS__INV = {
    0x0001: "ST_CONNECTED",
    0x0002: "ST_ADVISE",
    0x0004: "ST_ISLOCAL",
    0x0008: "ST_BLOCKED",
    0x0010: "ST_CLIENT",
    0x0020: "ST_TERMINATED",
    0x0040: "ST_INLIST",
    0x0080: "ST_BLOCKNEXT",
    0x0100: "ST_ISSELF",
}
_CONVINFO_STATE_ = {
    "XST_NULL": 0,
    "XST_INCOMPLETE": 1,
    "XST_CONNECTED": 2,
    "XST_INIT1": 3,
    "XST_INIT2": 4,
    "XST_REQSENT": 5,
    "XST_DATARCVD": 6,
    "XST_POKESENT": 7,
    "XST_POKEACKRCVD": 8,
    "XST_EXECSENT": 9,
    "XST_EXECACKRCVD": 10,
    "XST_ADVSENT": 11,
    "XST_UNADVSENT": 12,
    "XST_ADVACKRCVD": 13,
    "XST_UNADVACKRCVD": 14,
    "XST_ADVDATASENT": 15,
    "XST_ADVDATAACKRCVD": 16,
}
_CONVINFO_STATE__INV = {
    0: "XST_NULL",
    1: "XST_INCOMPLETE",
    2: "XST_CONNECTED",
    3: "XST_INIT1",
    4: "XST_INIT2",
    5: "XST_REQSENT",
    6: "XST_DATARCVD",
    7: "XST_POKESENT",
    8: "XST_POKEACKRCVD",
    9: "XST_EXECSENT",
    10: "XST_EXECACKRCVD",
    11: "XST_ADVSENT",
    12: "XST_UNADVSENT",
    13: "XST_ADVACKRCVD",
    14: "XST_UNADVACKRCVD",
    15: "XST_ADVDATASENT",
    16: "XST_ADVDATAACKRCVD",
}
_RIM_TYPE_ = {
    "RIM_TYPEMOUSE": 0,
    "RIM_TYPEKEYBOARD": 1,
    "RIM_TYPEHID": 2,
}
_RIM_TYPE__INV = {
    0: "RIM_TYPEMOUSE",
    1: "RIM_TYPEKEYBOARD",
    2: "RIM_TYPEHID",
}
_WindowLongIndex_ = {
    "GWL_WNDPROC": -4,
    "GWL_HINSTANCE": -6,
    "GWL_HWNDPARENT": -8,
    "GWL_ID": -12,
    "GWL_STYLE": -16,
    "GWL_EXSTYLE": -20,
    "GWL_USERDATA": -21,
    "DWL_MSGRESULT": 0,
    "DWL_DLGPROC": 4,
    "DWL_USER": 8,
}
_WindowLongIndex__INV = {
    -4: "GWL_WNDPROC",
    -6: "GWL_HINSTANCE",
    -8: "GWL_HWNDPARENT",
    -12: "GWL_ID",
    -16: "GWL_STYLE",
    -20: "GWL_EXSTYLE",
    -21: "GWL_USERDATA",
    0: "DWL_MSGRESULT",
    4: "DWL_DLGPROC",
    8: "DWL_USER",
}
_ClassLongIndex_ = {
    "GCL_MENUNAME": -8,
    "GCL_HBRBACKGROUND": -10,
    "GCL_HCURSOR": -12,
    "GCL_HICON": -14,
    "GCL_HMODULE": -16,
    "GCL_CBWNDEXTRA": -18,
    "GCL_CBCLSEXTRA": -20,
    "GCL_WNDPROC": -24,
    "GCL_STYLE": -26,
    "GCW_ATOM": -32,
    "GCL_HICONSM": -34,
}
_ClassLongIndex__INV = {
    -8: "GCL_MENUNAME",
    -10: "GCL_HBRBACKGROUND",
    -12: "GCL_HCURSOR",
    -14: "GCL_HICON",
    -16: "GCL_HMODULE",
    -18: "GCL_CBWNDEXTRA",
    -20: "GCL_CBCLSEXTRA",
    -24: "GCL_WNDPROC",
    -26: "GCL_STYLE",
    -32: "GCW_ATOM",
    -34: "GCL_HICONSM",
}
_SystemMetricIndex_ = {
    "SM_CXSCREEN": 0,
    "SM_CYSCREEN": 1,
    "SM_CXVSCROLL": 2,
    "SM_CYHSCROLL": 3,
    "SM_CYCAPTION": 4,
    "SM_CXBORDER": 5,
    "SM_CYBORDER": 6,
    "SM_CXDLGFRAME": 7,
    "SM_CYDLGFRAME": 8,
    "SM_CYVTHUMB": 9,
    "SM_CXHTHUMB": 10,
    "SM_CXICON": 11,
    "SM_CYICON": 12,
    "SM_CXCURSOR": 13,
    "SM_CYCURSOR": 14,
    "SM_CYMENU": 15,
    "SM_CXFULLSCREEN": 16,
    "SM_CYFULLSCREEN": 17,
    "SM_CYKANJIWINDOW": 18,
    "SM_MOUSEPRESENT": 19,
    "SM_CYVSCROLL": 20,
    "SM_CXHSCROLL": 21,
    "SM_DEBUG": 22,
    "SM_SWAPBUTTON": 23,
    "SM_RESERVED1": 24,
    "SM_RESERVED2": 25,
    "SM_RESERVED3": 26,
    "SM_RESERVED4": 27,
    "SM_CXMIN": 28,
    "SM_CYMIN": 29,
    "SM_CXSIZE": 30,
    "SM_CYSIZE": 31,
    "SM_CXFRAME": 32,
    "SM_CYFRAME": 33,
    "SM_CXMINTRACK": 34,
    "SM_CYMINTRACK": 35,
    "SM_CXDOUBLECLK": 36,
    "SM_CYDOUBLECLK": 37,
    "SM_CXICONSPACING": 38,
    "SM_CYICONSPACING": 39,
    "SM_MENUDROPALIGNMENT": 40,
    "SM_PENWINDOWS": 41,
    "SM_DBCSENABLED": 42,
    "SM_CMOUSEBUTTONS": 43,
    "SM_SECURE": 44,
    "SM_CXEDGE": 45,
    "SM_CYEDGE": 46,
    "SM_CXMINSPACING": 47,
    "SM_CYMINSPACING": 48,
    "SM_CXSMICON": 49,
    "SM_CYSMICON": 50,
    "SM_CYSMCAPTION": 51,
    "SM_CXSMSIZE": 52,
    "SM_CYSMSIZE": 53,
    "SM_CXMENUSIZE": 54,
    "SM_CYMENUSIZE": 55,
    "SM_ARRANGE": 56,
    "SM_CXMINIMIZED": 57,
    "SM_CYMINIMIZED": 58,
    "SM_CXMAXTRACK": 59,
    "SM_CYMAXTRACK": 60,
    "SM_CXMAXIMIZED": 61,
    "SM_CYMAXIMIZED": 62,
    "SM_NETWORK": 63,
    "SM_CLEANBOOT": 67,
    "SM_CXDRAG": 68,
    "SM_CYDRAG": 69,
    "SM_SHOWSOUNDS": 70,
    "SM_CXMENUCHECK": 71,
    "SM_CYMENUCHECK": 72,
    "SM_SLOWMACHINE": 73,
    "SM_MIDEASTENABLED": 74,
    "SM_MOUSEWHEELPRESENT": 75,
    "SM_XVIRTUALSCREEN": 76,
    "SM_YVIRTUALSCREEN": 77,
    "SM_CXVIRTUALSCREEN": 78,
    "SM_CYVIRTUALSCREEN": 79,
    "SM_CMONITORS": 80,
    "SM_SAMEDISPLAYFORMAT": 81,
    "SM_IMMENABLED": 82,
    "SM_CXFOCUSBORDER": 83,
    "SM_CYFOCUSBORDER": 84,
    "SM_TABLETPC": 86,
    "SM_MEDIACENTER": 87,
    "SM_STARTER": 88,
    "SM_SERVERR2": 89,
    "SM_MOUSEHORIZONTALWHEELPRESENT": 91,
    "SM_CXPADDEDBORDER": 92,
}
_SystemMetricIndex__INV = {
    0: "SM_CXSCREEN",
    1: "SM_CYSCREEN",
    2: "SM_CXVSCROLL",
    3: "SM_CYHSCROLL",
    4: "SM_CYCAPTION",
    5: "SM_CXBORDER",
    6: "SM_CYBORDER",
    7: "SM_CXDLGFRAME",
    8: "SM_CYDLGFRAME",
    9: "SM_CYVTHUMB",
    10: "SM_CXHTHUMB",
    11: "SM_CXICON",
    12: "SM_CYICON",
    13: "SM_CXCURSOR",
    14: "SM_CYCURSOR",
    15: "SM_CYMENU",
    16: "SM_CXFULLSCREEN",
    17: "SM_CYFULLSCREEN",
    18: "SM_CYKANJIWINDOW",
    19: "SM_MOUSEPRESENT",
    20: "SM_CYVSCROLL",
    21: "SM_CXHSCROLL",
    22: "SM_DEBUG",
    23: "SM_SWAPBUTTON",
    24: "SM_RESERVED1",
    25: "SM_RESERVED2",
    26: "SM_RESERVED3",
    27: "SM_RESERVED4",
    28: "SM_CXMIN",
    29: "SM_CYMIN",
    30: "SM_CXSIZE",
    31: "SM_CYSIZE",
    32: "SM_CXFRAME",
    33: "SM_CYFRAME",
    34: "SM_CXMINTRACK",
    35: "SM_CYMINTRACK",
    36: "SM_CXDOUBLECLK",
    37: "SM_CYDOUBLECLK",
    38: "SM_CXICONSPACING",
    39: "SM_CYICONSPACING",
    40: "SM_MENUDROPALIGNMENT",
    41: "SM_PENWINDOWS",
    42: "SM_DBCSENABLED",
    43: "SM_CMOUSEBUTTONS",
    44: "SM_SECURE",
    45: "SM_CXEDGE",
    46: "SM_CYEDGE",
    47: "SM_CXMINSPACING",
    48: "SM_CYMINSPACING",
    49: "SM_CXSMICON",
    50: "SM_CYSMICON",
    51: "SM_CYSMCAPTION",
    52: "SM_CXSMSIZE",
    53: "SM_CYSMSIZE",
    54: "SM_CXMENUSIZE",
    55: "SM_CYMENUSIZE",
    56: "SM_ARRANGE",
    57: "SM_CXMINIMIZED",
    58: "SM_CYMINIMIZED",
    59: "SM_CXMAXTRACK",
    60: "SM_CYMAXTRACK",
    61: "SM_CXMAXIMIZED",
    62: "SM_CYMAXIMIZED",
    63: "SM_NETWORK",
    67: "SM_CLEANBOOT",
    68: "SM_CXDRAG",
    69: "SM_CYDRAG",
    70: "SM_SHOWSOUNDS",
    71: "SM_CXMENUCHECK",
    72: "SM_CYMENUCHECK",
    73: "SM_SLOWMACHINE",
    74: "SM_MIDEASTENABLED",
    75: "SM_MOUSEWHEELPRESENT",
    76: "SM_XVIRTUALSCREEN",
    77: "SM_YVIRTUALSCREEN",
    78: "SM_CXVIRTUALSCREEN",
    79: "SM_CYVIRTUALSCREEN",
    80: "SM_CMONITORS",
    81: "SM_SAMEDISPLAYFORMAT",
    82: "SM_IMMENABLED",
    83: "SM_CXFOCUSBORDER",
    84: "SM_CYFOCUSBORDER",
    86: "SM_TABLETPC",
    87: "SM_MEDIACENTER",
    88: "SM_STARTER",
    89: "SM_SERVERR2",
    91: "SM_MOUSEHORIZONTALWHEELPRESENT",
    92: "SM_CXPADDEDBORDER",
}
_WindowMessageFilterEnum_ = {
    "MSGFLT_ADD": 1,
    "MSGFLT_REMOVE": 2,
}
_WindowMessageFilterEnum__INV = {
    1: "MSGFLT_ADD",
    2: "MSGFLT_REMOVE",
}
_UserObjectInformationEnum_ = {
    "UOI_FLAGS": 1,
    "UOI_NAME": 2,
    "UOI_TYPE": 3,
    "UOI_USER_SID": 4,
    "UOI_HEAPSIZE": 5,
    "UOI_IO": 6,
}
_UserObjectInformationEnum__INV = {
    1: "UOI_FLAGS",
    2: "UOI_NAME",
    3: "UOI_TYPE",
    4: "UOI_USER_SID",
    5: "UOI_HEAPSIZE",
    6: "UOI_IO",
}
_GetAncestorEnum_ = {
    "GA_PARENT": 1,
    "GA_ROOT": 2,
    "GA_ROOTOWNER": 3,
}
_GetAncestorEnum__INV = {
    1: "GA_PARENT",
    2: "GA_ROOT",
    3: "GA_ROOTOWNER",
}
_GetWindowEnum_ = {
    "GW_HWNDFIRST": 0,
    "GW_HWNDLAST": 1,
    "GW_HWNDNEXT": 2,
    "GW_HWNDPREV": 3,
    "GW_OWNER": 4,
    "GW_CHILD": 5,
    "GW_ENABLEDPOPUP": 6,
}
_GetWindowEnum__INV = {
    0: "GW_HWNDFIRST",
    1: "GW_HWNDLAST",
    2: "GW_HWNDNEXT",
    3: "GW_HWNDPREV",
    4: "GW_OWNER",
    5: "GW_CHILD",
    6: "GW_ENABLEDPOPUP",
}
_ObjectIdEnum_ = {
    "OBJID_WINDOW": 0x00000000,
    "OBJID_SYSMENU": 0xFFFFFFFF,
    "OBJID_TITLEBAR": 0xFFFFFFFE,
    "OBJID_MENU": 0xFFFFFFFD,
    "OBJID_CLIENT": 0xFFFFFFFC,
    "OBJID_VSCROLL": 0xFFFFFFFB,
    "OBJID_HSCROLL": 0xFFFFFFFA,
    "OBJID_SIZEGRIP": 0xFFFFFFF9,
    "OBJID_CARET": 0xFFFFFFF8,
    "OBJID_CURSOR": 0xFFFFFFF7,
    "OBJID_ALERT": 0xFFFFFFF6,
    "OBJID_SOUND": 0xFFFFFFF5,
    "OBJID_QUERYCLASSNAMEIDX": 0xFFFFFFF4,
    "OBJID_NATIVEOM": 0xFFFFFFF0,
}
_ObjectIdEnum__INV = {
    0x00000000: "OBJID_WINDOW",
    0xFFFFFFFF: "OBJID_SYSMENU",
    0xFFFFFFFE: "OBJID_TITLEBAR",
    0xFFFFFFFD: "OBJID_MENU",
    0xFFFFFFFC: "OBJID_CLIENT",
    0xFFFFFFFB: "OBJID_VSCROLL",
    0xFFFFFFFA: "OBJID_HSCROLL",
    0xFFFFFFF9: "OBJID_SIZEGRIP",
    0xFFFFFFF8: "OBJID_CARET",
    0xFFFFFFF7: "OBJID_CURSOR",
    0xFFFFFFF6: "OBJID_ALERT",
    0xFFFFFFF5: "OBJID_SOUND",
    0xFFFFFFF4: "OBJID_QUERYCLASSNAMEIDX",
    0xFFFFFFF0: "OBJID_NATIVEOM",
}
_MenuCommandPosFlag_ = {
    "MF_BYCOMMAND": 0x00000000,
    "MF_BYPOSITION": 0x00000400,
}
_MenuCommandPosFlag__INV = {
    0x00000000: "MF_BYCOMMAND",
    0x00000400: "MF_BYPOSITION",
}
_EnableMenuItemResult_ = {
    "MF_ENABLED": 0x00000000,
    "MF_GRAYED": 0x00000001,
    "MF_DISABLED": 0x00000002,
}
_EnableMenuItemResult__INV = {
    0x00000000: "MF_ENABLED",
    0x00000001: "MF_GRAYED",
    0x00000002: "MF_DISABLED",
}
_ClipboardFormat_ = {
    "CF_TEXT": 1,
    "CF_BITMAP": 2,
    "CF_METAFILEPICT": 3,
    "CF_SYLK": 4,
    "CF_DIF": 5,
    "CF_TIFF": 6,
    "CF_OEMTEXT": 7,
    "CF_DIB": 8,
    "CF_PALETTE": 9,
    "CF_PENDATA": 10,
    "CF_RIFF": 11,
    "CF_WAVE": 12,
    "CF_UNICODETEXT": 13,
    "CF_ENHMETAFILE": 14,
    "CF_HDROP": 15,
    "CF_LOCALE": 16,
    "CF_DIBV5": 17,
    "CF_OWNERDISPLAY": 0x0080,
    "CF_DSPTEXT": 0x0081,
    "CF_DSPBITMAP": 0x0082,
    "CF_DSPMETAFILEPICT": 0x0083,
    "CF_DSPENHMETAFILE": 0x008E,
}
_ClipboardFormat__INV = {
    1: "CF_TEXT",
    2: "CF_BITMAP",
    3: "CF_METAFILEPICT",
    4: "CF_SYLK",
    5: "CF_DIF",
    6: "CF_TIFF",
    7: "CF_OEMTEXT",
    8: "CF_DIB",
    9: "CF_PALETTE",
    10: "CF_PENDATA",
    11: "CF_RIFF",
    12: "CF_WAVE",
    13: "CF_UNICODETEXT",
    14: "CF_ENHMETAFILE",
    15: "CF_HDROP",
    16: "CF_LOCALE",
    17: "CF_DIBV5",
    0x0080: "CF_OWNERDISPLAY",
    0x0081: "CF_DSPTEXT",
    0x0082: "CF_DSPBITMAP",
    0x0083: "CF_DSPMETAFILEPICT",
    0x008E: "CF_DSPENHMETAFILE",
}
_WindowsHook_ = {
    "WH_MSGFILTER": -1,
    "WH_JOURNALRECORD": 0,
    "WH_JOURNALPLAYBACK": 1,
    "WH_KEYBOARD": 2,
    "WH_GETMESSAGE": 3,
    "WH_CALLWNDPROC": 4,
    "WH_CBT": 5,
    "WH_SYSMSGFILTER": 6,
    "WH_MOUSE": 7,
    "WH_HARDWARE": 8,
    "WH_DEBUG": 9,
    "WH_SHELL": 10,
    "WH_FOREGROUNDIDLE": 11,
    "WH_CALLWNDPROCRET": 12,
    "WH_KEYBOARD_LL": 13,
    "WH_MOUSE_LL": 14,
}
_WindowsHook__INV = {
    -1: "WH_MSGFILTER",
    0: "WH_JOURNALRECORD",
    1: "WH_JOURNALPLAYBACK",
    2: "WH_KEYBOARD",
    3: "WH_GETMESSAGE",
    4: "WH_CALLWNDPROC",
    5: "WH_CBT",
    6: "WH_SYSMSGFILTER",
    7: "WH_MOUSE",
    8: "WH_HARDWARE",
    9: "WH_DEBUG",
    10: "WH_SHELL",
    11: "WH_FOREGROUNDIDLE",
    12: "WH_CALLWNDPROCRET",
    13: "WH_KEYBOARD_LL",
    14: "WH_MOUSE_LL",
}
_KeyboardLayoutHandle_ = {
    "HKL_PREV": 0,
    "HKL_NEXT": 1,
}
_KeyboardLayoutHandle__INV = {
    0: "HKL_PREV",
    1: "HKL_NEXT",
}
_EnumDisplaySettingsEnum_ = {
    "ENUM_CURRENT_SETTINGS": -1,
    "ENUM_REGISTRY_SETTINGS": -2,
}
_EnumDisplaySettingsEnum__INV = {
    -1: "ENUM_CURRENT_SETTINGS",
    -2: "ENUM_REGISTRY_SETTINGS",
}
_ButtonState_ = {
    "BST_UNCHECKED": 0x0000,
    "BST_CHECKED": 0x0001,
    "BST_INDETERMINATE": 0x0002,
    "BST_PUSHED": 0x0004,
    "BST_FOCUS": 0x0008,
}
_ButtonState__INV = {
    0x0000: "BST_UNCHECKED",
    0x0001: "BST_CHECKED",
    0x0002: "BST_INDETERMINATE",
    0x0004: "BST_PUSHED",
    0x0008: "BST_FOCUS",
}
_MapVirtualKeyType_ = {
    "MAPVK_VK_TO_VSC": 0,
    "MAPVK_VSC_TO_VK": 1,
    "MAPVK_VK_TO_CHAR": 2,
    "MAPVK_VSC_TO_VK_EX": 3,
    "MAPVK_VK_TO_VSC_EX": 4,
}
_MapVirtualKeyType__INV = {
    0: "MAPVK_VK_TO_VSC",
    1: "MAPVK_VSC_TO_VK",
    2: "MAPVK_VK_TO_CHAR",
    3: "MAPVK_VSC_TO_VK_EX",
    4: "MAPVK_VK_TO_VSC_EX",
}
_DesktopFlags_ = {
    "DF_ALLOWOTHERACCOUNTHOOK": 0x0001,
}
_DesktopFlags__INV = {
    0x0001: "DF_ALLOWOTHERACCOUNTHOOK",
}
_CreateWindowStationFlags_ = {
    "CWF_CREATE_ONLY": 0x00000001,
}
_CreateWindowStationFlags__INV = {
    0x00000001: "CWF_CREATE_ONLY",
}
_LockSetForegroundWindowCode_ = {
    "LSFW_LOCK": 1,
    "LSFW_UNLOCK": 2,
}
_LockSetForegroundWindowCode__INV = {
    1: "LSFW_LOCK",
    2: "LSFW_UNLOCK",
}
_LoadImageString/LPCTSTR_ = {
    "OBM_CLOSE": 32754,
    "OBM_UPARROW": 32753,
    "OBM_DNARROW": 32752,
    "OBM_RGARROW": 32751,
    "OBM_LFARROW": 32750,
    "OBM_REDUCE": 32749,
    "OBM_ZOOM": 32748,
    "OBM_RESTORE": 32747,
    "OBM_REDUCED": 32746,
    "OBM_ZOOMD": 32745,
    "OBM_RESTORED": 32744,
    "OBM_UPARROWD": 32743,
    "OBM_DNARROWD": 32742,
    "OBM_RGARROWD": 32741,
    "OBM_LFARROWD": 32740,
    "OBM_MNARROW": 32739,
    "OBM_COMBO": 32738,
    "OBM_UPARROWI": 32737,
    "OBM_DNARROWI": 32736,
    "OBM_RGARROWI": 32735,
    "OBM_LFARROWI": 32734,
    "OBM_OLD_CLOSE": 32767,
    "OBM_SIZE": 32766,
    "OBM_OLD_UPARROW": 32765,
    "OBM_OLD_DNARROW": 32764,
    "OBM_OLD_RGARROW": 32763,
    "OBM_OLD_LFARROW": 32762,
    "OBM_BTSIZE": 32761,
    "OBM_CHECK": 32760,
    "OBM_CHECKBOXES": 32759,
    "OBM_BTNCORNERS": 32758,
    "OBM_OLD_REDUCE": 32757,
    "OBM_OLD_ZOOM": 32756,
    "OBM_OLD_RESTORE": 32755,
    "OCR_NORMAL": 32512,
    "OCR_IBEAM": 32513,
    "OCR_WAIT": 32514,
    "OCR_CROSS": 32515,
    "OCR_UP": 32516,
    "OCR_SIZE": 32640,
    "OCR_ICON": 32641,
    "OCR_SIZENWSE": 32642,
    "OCR_SIZENESW": 32643,
    "OCR_SIZEWE": 32644,
    "OCR_SIZENS": 32645,
    "OCR_SIZEALL": 32646,
    "OCR_ICOCUR": 32647,
    "OCR_NO": 32648,
    "OCR_HAND": 32649,
    "OCR_APPSTARTING": 32650,
    "OIC_SAMPLE": 32512,
    "OIC_ERROR": 32513,
    "OIC_QUES": 32514,
    "OIC_WARNING": 32515,
    "OIC_INFORMATION": 32516,
    "OIC_WINLOGO": 32517,
    "OIC_SHIELD": 32518,
}
_LoadImageString/LPCTSTR__INV = {
    32754: "OBM_CLOSE",
    32753: "OBM_UPARROW",
    32752: "OBM_DNARROW",
    32751: "OBM_RGARROW",
    32750: "OBM_LFARROW",
    32749: "OBM_REDUCE",
    32748: "OBM_ZOOM",
    32747: "OBM_RESTORE",
    32746: "OBM_REDUCED",
    32745: "OBM_ZOOMD",
    32744: "OBM_RESTORED",
    32743: "OBM_UPARROWD",
    32742: "OBM_DNARROWD",
    32741: "OBM_RGARROWD",
    32740: "OBM_LFARROWD",
    32739: "OBM_MNARROW",
    32738: "OBM_COMBO",
    32737: "OBM_UPARROWI",
    32736: "OBM_DNARROWI",
    32735: "OBM_RGARROWI",
    32734: "OBM_LFARROWI",
    32767: "OBM_OLD_CLOSE",
    32766: "OBM_SIZE",
    32765: "OBM_OLD_UPARROW",
    32764: "OBM_OLD_DNARROW",
    32763: "OBM_OLD_RGARROW",
    32762: "OBM_OLD_LFARROW",
    32761: "OBM_BTSIZE",
    32760: "OBM_CHECK",
    32759: "OBM_CHECKBOXES",
    32758: "OBM_BTNCORNERS",
    32757: "OBM_OLD_REDUCE",
    32756: "OBM_OLD_ZOOM",
    32755: "OBM_OLD_RESTORE",
    32512: "OCR_NORMAL",
    32513: "OCR_IBEAM",
    32514: "OCR_WAIT",
    32515: "OCR_CROSS",
    32516: "OCR_UP",
    32640: "OCR_SIZE",
    32641: "OCR_ICON",
    32642: "OCR_SIZENWSE",
    32643: "OCR_SIZENESW",
    32644: "OCR_SIZEWE",
    32645: "OCR_SIZENS",
    32646: "OCR_SIZEALL",
    32647: "OCR_ICOCUR",
    32648: "OCR_NO",
    32649: "OCR_HAND",
    32650: "OCR_APPSTARTING",
    32512: "OIC_SAMPLE",
    32513: "OIC_ERROR",
    32514: "OIC_QUES",
    32515: "OIC_WARNING",
    32516: "OIC_INFORMATION",
    32517: "OIC_WINLOGO",
    32518: "OIC_SHIELD",
}
_LoadBitmapString/LPCTSTR_ = {
    "OBM_CLOSE": 32754,
    "OBM_UPARROW": 32753,
    "OBM_DNARROW": 32752,
    "OBM_RGARROW": 32751,
    "OBM_LFARROW": 32750,
    "OBM_REDUCE": 32749,
    "OBM_ZOOM": 32748,
    "OBM_RESTORE": 32747,
    "OBM_REDUCED": 32746,
    "OBM_ZOOMD": 32745,
    "OBM_RESTORED": 32744,
    "OBM_UPARROWD": 32743,
    "OBM_DNARROWD": 32742,
    "OBM_RGARROWD": 32741,
    "OBM_LFARROWD": 32740,
    "OBM_MNARROW": 32739,
    "OBM_COMBO": 32738,
    "OBM_UPARROWI": 32737,
    "OBM_DNARROWI": 32736,
    "OBM_RGARROWI": 32735,
    "OBM_LFARROWI": 32734,
    "OBM_OLD_CLOSE": 32767,
    "OBM_SIZE": 32766,
    "OBM_OLD_UPARROW": 32765,
    "OBM_OLD_DNARROW": 32764,
    "OBM_OLD_RGARROW": 32763,
    "OBM_OLD_LFARROW": 32762,
    "OBM_BTSIZE": 32761,
    "OBM_CHECK": 32760,
    "OBM_CHECKBOXES": 32759,
    "OBM_BTNCORNERS": 32758,
    "OBM_OLD_REDUCE": 32757,
    "OBM_OLD_ZOOM": 32756,
    "OBM_OLD_RESTORE": 32755,
}
_LoadBitmapString/LPCTSTR__INV = {
    32754: "OBM_CLOSE",
    32753: "OBM_UPARROW",
    32752: "OBM_DNARROW",
    32751: "OBM_RGARROW",
    32750: "OBM_LFARROW",
    32749: "OBM_REDUCE",
    32748: "OBM_ZOOM",
    32747: "OBM_RESTORE",
    32746: "OBM_REDUCED",
    32745: "OBM_ZOOMD",
    32744: "OBM_RESTORED",
    32743: "OBM_UPARROWD",
    32742: "OBM_DNARROWD",
    32741: "OBM_RGARROWD",
    32740: "OBM_LFARROWD",
    32739: "OBM_MNARROW",
    32738: "OBM_COMBO",
    32737: "OBM_UPARROWI",
    32736: "OBM_DNARROWI",
    32735: "OBM_RGARROWI",
    32734: "OBM_LFARROWI",
    32767: "OBM_OLD_CLOSE",
    32766: "OBM_SIZE",
    32765: "OBM_OLD_UPARROW",
    32764: "OBM_OLD_DNARROW",
    32763: "OBM_OLD_RGARROW",
    32762: "OBM_OLD_LFARROW",
    32761: "OBM_BTSIZE",
    32760: "OBM_CHECK",
    32759: "OBM_CHECKBOXES",
    32758: "OBM_BTNCORNERS",
    32757: "OBM_OLD_REDUCE",
    32756: "OBM_OLD_ZOOM",
    32755: "OBM_OLD_RESTORE",
}
_LoadCursorString/LPCTSTR_ = {
    "IDC_ARROW": 32512,
    "IDC_IBEAM": 32513,
    "IDC_WAIT": 32514,
    "IDC_CROSS": 32515,
    "IDC_UPARROW": 32516,
    "IDC_SIZE": 32640,
    "IDC_ICON": 32641,
    "IDC_SIZENWSE": 32642,
    "IDC_SIZENESW": 32643,
    "IDC_SIZEWE": 32644,
    "IDC_SIZENS": 32645,
    "IDC_SIZEALL": 32646,
    "IDC_NO": 32648,
    "IDC_HAND": 32649,
    "IDC_APPSTARTING": 32650,
    "IDC_HELP": 32651,
}
_LoadCursorString/LPCTSTR__INV = {
    32512: "IDC_ARROW",
    32513: "IDC_IBEAM",
    32514: "IDC_WAIT",
    32515: "IDC_CROSS",
    32516: "IDC_UPARROW",
    32640: "IDC_SIZE",
    32641: "IDC_ICON",
    32642: "IDC_SIZENWSE",
    32643: "IDC_SIZENESW",
    32644: "IDC_SIZEWE",
    32645: "IDC_SIZENS",
    32646: "IDC_SIZEALL",
    32648: "IDC_NO",
    32649: "IDC_HAND",
    32650: "IDC_APPSTARTING",
    32651: "IDC_HELP",
}
_LoadIconString/LPCTSTR_ = {
    "IDI_APPLICATION": 32512,
    "IDI_ERROR": 32513,
    "IDI_QUESTION": 32514,
    "IDI_WARNING": 32515,
    "IDI_INFORMATION": 32516,
    "IDI_WINLOGO": 32517,
    "IDI_SHIELD": 32518,
}
_LoadIconString/LPCTSTR__INV = {
    32512: "IDI_APPLICATION",
    32513: "IDI_ERROR",
    32514: "IDI_QUESTION",
    32515: "IDI_WARNING",
    32516: "IDI_INFORMATION",
    32517: "IDI_WINLOGO",
    32518: "IDI_SHIELD",
}
_CursorId_ = {
    "OCR_NORMAL": 32512,
    "OCR_IBEAM": 32513,
    "OCR_WAIT": 32514,
    "OCR_CROSS": 32515,
    "OCR_UP": 32516,
    "OCR_SIZE": 32640,
    "OCR_ICON": 32641,
    "OCR_SIZENWSE": 32642,
    "OCR_SIZENESW": 32643,
    "OCR_SIZEWE": 32644,
    "OCR_SIZENS": 32645,
    "OCR_SIZEALL": 32646,
    "OCR_ICOCUR": 32647,
    "OCR_NO": 32648,
    "OCR_HAND": 32649,
    "OCR_APPSTARTING": 32650,
}
_CursorId__INV = {
    32512: "OCR_NORMAL",
    32513: "OCR_IBEAM",
    32514: "OCR_WAIT",
    32515: "OCR_CROSS",
    32516: "OCR_UP",
    32640: "OCR_SIZE",
    32641: "OCR_ICON",
    32642: "OCR_SIZENWSE",
    32643: "OCR_SIZENESW",
    32644: "OCR_SIZEWE",
    32645: "OCR_SIZENS",
    32646: "OCR_SIZEALL",
    32647: "OCR_ICOCUR",
    32648: "OCR_NO",
    32649: "OCR_HAND",
    32650: "OCR_APPSTARTING",
}
_WindowRegion_ = {
    "ERROR": 0,
    "NULLREGION": 1,
    "SIMPLEREGION": 2,
    "COMPLEXREGION": 3,
}
_WindowRegion__INV = {
    0: "ERROR",
    1: "NULLREGION",
    2: "SIMPLEREGION",
    3: "COMPLEXREGION",
}
_CreateWindow_CW_ = {
    "CW_USEDEFAULT": 0x80000000,
}
_CreateWindow_CW__INV = {
    0x80000000: "CW_USEDEFAULT",
}
_TOUCH_FEEDBACK_MODE_ = {
    "TOUCH_FEEDBACK_DEFAULT": 0x1,
    "TOUCH_FEEDBACK_INDIRECT": 0x2,
    "TOUCH_FEEDBACK_NONE": 0x3,
}
_TOUCH_FEEDBACK_MODE__INV = {
    0x1: "TOUCH_FEEDBACK_DEFAULT",
    0x2: "TOUCH_FEEDBACK_INDIRECT",
    0x3: "TOUCH_FEEDBACK_NONE",
}
POINTER_INPUT_TYPE = {
    "PT_POINTER": 0x00000001,
    "PT_TOUCH": 0x00000002,
    "PT_PEN": 0x00000003,
    "PT_MOUSE": 0x00000004,
}
POINTER_INPUT_TYPE_INV = {
    0x00000001: "PT_POINTER",
    0x00000002: "PT_TOUCH",
    0x00000003: "PT_PEN",
    0x00000004: "PT_MOUSE",
}
POINTER_BUTTON_CHANGE_TYPE = {
    "POINTER_CHANGE_NONE": 0,
    "POINTER_CHANGE_FIRSTBUTTON_DOWN": 1,
    "POINTER_CHANGE_FIRSTBUTTON_UP": 2,
    "POINTER_CHANGE_SECONDBUTTON_DOWN": 3,
    "POINTER_CHANGE_SECONDBUTTON_UP": 4,
    "POINTER_CHANGE_THIRDBUTTON_DOWN": 5,
    "POINTER_CHANGE_THIRDBUTTON_UP": 6,
    "POINTER_CHANGE_FOURTHBUTTON_DOWN": 7,
    "POINTER_CHANGE_FOURTHBUTTON_UP": 8,
    "POINTER_CHANGE_FIFTHBUTTON_DOWN": 9,
    "POINTER_CHANGE_FIFTHBUTTON_UP": 10,
}
POINTER_BUTTON_CHANGE_TYPE_INV = {
    0: "POINTER_CHANGE_NONE",
    1: "POINTER_CHANGE_FIRSTBUTTON_DOWN",
    2: "POINTER_CHANGE_FIRSTBUTTON_UP",
    3: "POINTER_CHANGE_SECONDBUTTON_DOWN",
    4: "POINTER_CHANGE_SECONDBUTTON_UP",
    5: "POINTER_CHANGE_THIRDBUTTON_DOWN",
    6: "POINTER_CHANGE_THIRDBUTTON_UP",
    7: "POINTER_CHANGE_FOURTHBUTTON_DOWN",
    8: "POINTER_CHANGE_FOURTHBUTTON_UP",
    9: "POINTER_CHANGE_FIFTHBUTTON_DOWN",
    10: "POINTER_CHANGE_FIFTHBUTTON_UP",
}
CROSS_SLIDE_THRESHOLD = {
    "CROSS_SLIDE_THRESHOLD_SELECT_START": 0x00000000,
    "CROSS_SLIDE_THRESHOLD_SPEED_BUMP_START": 0x00000001,
    "CROSS_SLIDE_THRESHOLD_SPEED_BUMP_END": 0x00000002,
    "CROSS_SLIDE_THRESHOLD_REARRANGE_START": 0x00000003,
}
CROSS_SLIDE_THRESHOLD_INV = {
    0x00000000: "CROSS_SLIDE_THRESHOLD_SELECT_START",
    0x00000001: "CROSS_SLIDE_THRESHOLD_SPEED_BUMP_START",
    0x00000002: "CROSS_SLIDE_THRESHOLD_SPEED_BUMP_END",
    0x00000003: "CROSS_SLIDE_THRESHOLD_REARRANGE_START",
}
INERTIA_PARAMETER = {
    "INERTIA_PARAMETER_TRANSLATION_DECELERATION": 0x00000001,
    "INERTIA_PARAMETER_TRANSLATION_DISPLACEMENT": 0x00000002,
    "INERTIA_PARAMETER_ROTATION_DECELERATION": 0x00000003,
    "INERTIA_PARAMETER_ROTATION_ANGLE": 0x00000004,
    "INERTIA_PARAMETER_EXPANSION_DECELERATION": 0x00000005,
    "INERTIA_PARAMETER_EXPANSION_EXPANSION": 0x00000006,
}
INERTIA_PARAMETER_INV = {
    0x00000001: "INERTIA_PARAMETER_TRANSLATION_DECELERATION",
    0x00000002: "INERTIA_PARAMETER_TRANSLATION_DISPLACEMENT",
    0x00000003: "INERTIA_PARAMETER_ROTATION_DECELERATION",
    0x00000004: "INERTIA_PARAMETER_ROTATION_ANGLE",
    0x00000005: "INERTIA_PARAMETER_EXPANSION_DECELERATION",
    0x00000006: "INERTIA_PARAMETER_EXPANSION_EXPANSION",
}
INTERACTION_STATE = {
    "INTERACTION_STATE_IDLE": 0x00000000,
    "INTERACTION_STATE_IN_INTERACTION": 0x00000001,
    "INTERACTION_STATE_POSSIBLE_DOUBLE_TAP": 0x00000002,
}
INTERACTION_STATE_INV = {
    0x00000000: "INTERACTION_STATE_IDLE",
    0x00000001: "INTERACTION_STATE_IN_INTERACTION",
    0x00000002: "INTERACTION_STATE_POSSIBLE_DOUBLE_TAP",
}
INTERACTION_CONTEXT_PROPERTY = {
    "INTERACTION_CONTEXT_PROPERTY_MEASUREMENT_UNITS": 0x00000001,
    "INTERACTION_CONTEXT_PROPERTY_INTERACTION_UI_FEEDBACK": 0x00000002,
    "INTERACTION_CONTEXT_PROPERTY_FILTER_POINTERS": 0x00000003,
}
INTERACTION_CONTEXT_PROPERTY_INV = {
    0x00000001: "INTERACTION_CONTEXT_PROPERTY_MEASUREMENT_UNITS",
    0x00000002: "INTERACTION_CONTEXT_PROPERTY_INTERACTION_UI_FEEDBACK",
    0x00000003: "INTERACTION_CONTEXT_PROPERTY_FILTER_POINTERS",
}
MOUSE_WHEEL_PARAMETER = {
    "MOUSE_WHEEL_PARAMETER_CHAR_TRANSLATION_X": 0x00000001,
    "MOUSE_WHEEL_PARAMETER_CHAR_TRANSLATION_Y": 0x00000002,
    "MOUSE_WHEEL_PARAMETER_DELTA_SCALE": 0x00000003,
    "MOUSE_WHEEL_PARAMETER_DELTA_ROTATION": 0x00000004,
    "MOUSE_WHEEL_PARAMETER_PAGE_TRANSLATION_X": 0x00000005,
    "MOUSE_WHEEL_PARAMETER_PAGE_TRANSLATION_Y": 0x00000006,
}
MOUSE_WHEEL_PARAMETER_INV = {
    0x00000001: "MOUSE_WHEEL_PARAMETER_CHAR_TRANSLATION_X",
    0x00000002: "MOUSE_WHEEL_PARAMETER_CHAR_TRANSLATION_Y",
    0x00000003: "MOUSE_WHEEL_PARAMETER_DELTA_SCALE",
    0x00000004: "MOUSE_WHEEL_PARAMETER_DELTA_ROTATION",
    0x00000005: "MOUSE_WHEEL_PARAMETER_PAGE_TRANSLATION_X",
    0x00000006: "MOUSE_WHEEL_PARAMETER_PAGE_TRANSLATION_Y",
}
INTERACTION_ID = {
    "INTERACTION_ID_NONE": 0x00000000,
    "INTERACTION_ID_MANIPULATION": 0x00000001,
    "INTERACTION_ID_TAP": 0x00000002,
    "INTERACTION_ID_SECONDARY_TAP": 0x00000003,
    "INTERACTION_ID_HOLD": 0x00000004,
    "INTERACTION_ID_DRAG": 0x00000005,
    "INTERACTION_ID_CROSS_SLIDE": 0x00000006,
}
INTERACTION_ID_INV = {
    0x00000000: "INTERACTION_ID_NONE",
    0x00000001: "INTERACTION_ID_MANIPULATION",
    0x00000002: "INTERACTION_ID_TAP",
    0x00000003: "INTERACTION_ID_SECONDARY_TAP",
    0x00000004: "INTERACTION_ID_HOLD",
    0x00000005: "INTERACTION_ID_DRAG",
    0x00000006: "INTERACTION_ID_CROSS_SLIDE",
}
INPUT_MESSAGE_DEVICE_TYPE = {
    "IMDT_UNAVAILABLE": 0x00000000,
    "IMDT_KEYBOARD": 0x00000001,
    "IMDT_MOUSE": 0x00000002,
    "IMDT_TOUCH": 0x00000004,
    "IMDT_PEN": 0x00000008,
}
INPUT_MESSAGE_DEVICE_TYPE_INV = {
    0x00000000: "IMDT_UNAVAILABLE",
    0x00000001: "IMDT_KEYBOARD",
    0x00000002: "IMDT_MOUSE",
    0x00000004: "IMDT_TOUCH",
    0x00000008: "IMDT_PEN",
}
INPUT_MESSAGE_ORIGIN_ID = {
    "IMO_UNAVAILABLE": 0x00000000,
    "IMO_HARDWARE": 0x00000001,
    "IMO_INJECTED": 0x00000002,
    "IMO_SYSTEM": 0x00000004,
}
INPUT_MESSAGE_ORIGIN_ID_INV = {
    0x00000000: "IMO_UNAVAILABLE",
    0x00000001: "IMO_HARDWARE",
    0x00000002: "IMO_INJECTED",
    0x00000004: "IMO_SYSTEM",
}
POINTER_DEVICE_TYPE = {
    "POINTER_DEVICE_TYPE_INTEGRATED_PEN": 0x00000001,
    "POINTER_DEVICE_TYPE_EXTERNAL_PEN": 0x00000002,
    "POINTER_DEVICE_TYPE_TOUCH": 0x00000003,
}
POINTER_DEVICE_TYPE_INV = {
    0x00000001: "POINTER_DEVICE_TYPE_INTEGRATED_PEN",
    0x00000002: "POINTER_DEVICE_TYPE_EXTERNAL_PEN",
    0x00000003: "POINTER_DEVICE_TYPE_TOUCH",
}
POINTER_DEVICE_CURSOR_TYPE = {
    "POINTER_DEVICE_CURSOR_TYPE_UNKNOWN": 0x00000000,
    "POINTER_DEVICE_CURSOR_TYPE_TIP": 0x00000001,
    "POINTER_DEVICE_CURSOR_TYPE_ERASER": 0x00000002,
}
POINTER_DEVICE_CURSOR_TYPE_INV = {
    0x00000000: "POINTER_DEVICE_CURSOR_TYPE_UNKNOWN",
    0x00000001: "POINTER_DEVICE_CURSOR_TYPE_TIP",
    0x00000002: "POINTER_DEVICE_CURSOR_TYPE_ERASER",
}
_TIMERV_COALESCING_ = {
    "TIMERV_DEFAULT_COALESCING": 0,
    "TIMERV_NO_COALESCING": 0xFFFFFFFF,
}
_TIMERV_COALESCING__INV = {
    0: "TIMERV_DEFAULT_COALESCING",
    0xFFFFFFFF: "TIMERV_NO_COALESCING",
}
FEEDBACK_TYPE = {
    "FEEDBACK_TOUCH_CONTACTVISUALIZATION": 1,
    "FEEDBACK_PEN_BARRELVISUALIZATION": 2,
    "FEEDBACK_PEN_TAP": 3,
    "FEEDBACK_PEN_DOUBLETAP": 4,
    "FEEDBACK_PEN_PRESSANDHOLD": 5,
    "FEEDBACK_PEN_RIGHTTAP": 6,
    "FEEDBACK_TOUCH_TAP": 7,
    "FEEDBACK_TOUCH_DOUBLETAP": 8,
    "FEEDBACK_TOUCH_PRESSANDHOLD": 9,
    "FEEDBACK_TOUCH_RIGHTTAP": 10,
    "FEEDBACK_GESTURE_PRESSANDTAP": 11,
}
FEEDBACK_TYPE_INV = {
    1: "FEEDBACK_TOUCH_CONTACTVISUALIZATION",
    2: "FEEDBACK_PEN_BARRELVISUALIZATION",
    3: "FEEDBACK_PEN_TAP",
    4: "FEEDBACK_PEN_DOUBLETAP",
    5: "FEEDBACK_PEN_PRESSANDHOLD",
    6: "FEEDBACK_PEN_RIGHTTAP",
    7: "FEEDBACK_TOUCH_TAP",
    8: "FEEDBACK_TOUCH_DOUBLETAP",
    9: "FEEDBACK_TOUCH_PRESSANDHOLD",
    10: "FEEDBACK_TOUCH_RIGHTTAP",
    11: "FEEDBACK_GESTURE_PRESSANDTAP",
}
_MSGFLT_ACTION_ = {
    "MSGFLT_RESET": 0,
    "MSGFLT_ALLOW": 1,
    "MSGFLT_DISALLOW": 2,
}
_MSGFLT_ACTION__INV = {
    0: "MSGFLT_RESET",
    1: "MSGFLT_ALLOW",
    2: "MSGFLT_DISALLOW",
}

###################

###### Types ######
PMENUBARINFO = LPVOID
WNDPROC = LPVOID
MSGBOXCALLBACK = LPVOID
HDESK = HANDLE
SENDASYNCPROC = LPVOID
WNDENUMPROC = LPVOID
HDEVNOTIFY = PVOID
HCONV = HANDLE
HDDEDATA = HANDLE
HSZ = HANDLE
HCONVLIST = HANDLE
PFNCALLBACK = LPVOID
HHOOK = HANDLE
HOOKPROC = LPVOID
CONST_MENUTEMPLATE_PTR = LPVOID
MONITORENUMPROC = LPVOID
DRAWSTATEPROC = LPVOID
GRAYSTRINGPROC = LPVOID
HRAWINPUT = HANDLE
TIMERPROC = LPVOID
PROPENUMPROC = LPVOID
PROPENUMPROCEX = LPVOID
WINSTAENUMPROC = LPVOID
DESKTOPENUMPROC = LPVOID
WINEVENTPROC = LPVOID
HWINSTA = HANDLE
HWINEVENTHOOK = HANDLE
HTOUCHINPUT = HANDLE
HGESTUREINFO = HANDLE
HINTERACTIONCONTEXT = HANDLE
HINTERACTIONCONTEXT_PTR = Ptr("<I", HINTERACTIONCONTEXT())
INTERACTION_CONTEXT_OUTPUT_CALLBACK = LPVOID
PDEVICE_NOTIFY_CALLBACK_ROUTINE = LPVOID
DWORD__CCHILDREN_TITLEBAR_+_1_ = Array(DWORD, 6)
DWORD__CCHILDREN_SCROLLBAR_+_1_ = Array(DWORD, 6)
BYTE__32_ = Array(BYTE, 32)
WCHAR__POINTER_DEVICE_PRODUCT_STRING_MAX_ = Array(WCHAR, 520)

class TITLEBARINFO(MemStruct):
    fields = [
        ("cbSize", DWORD()),
        ("rcTitleBar", RECT()),
        ("rgstate", DWORD__CCHILDREN_TITLEBAR_+_1_()),
    ]

PTITLEBARINFO = Ptr("<I", TITLEBARINFO())
_DISPLAY_DEVICE_STATE_ = DWORD

class DISPLAY_DEVICE(MemStruct):
    fields = [
        ("cb", DWORD()),
        ("DeviceName", TCHAR__32_()),
        ("DeviceString", TCHAR__128_()),
        ("StateFlags", _DISPLAY_DEVICE_STATE_()),
        ("DeviceID", TCHAR__128_()),
        ("DeviceKey", TCHAR__128_()),
    ]

PDISPLAY_DEVICE = Ptr("<I", DISPLAY_DEVICE())

class ICONINFOEX(MemStruct):
    fields = [
        ("cbSize", DWORD()),
        ("fIcon", BOOL()),
        ("xHotspot", DWORD()),
        ("yHotspot", DWORD()),
        ("hbmMask", HBITMAP()),
        ("hbmColor", HBITMAP()),
        ("wResID", WORD()),
        ("szModName", TCHAR__MAX_PATH_()),
        ("szResName", TCHAR__MAX_PATH_()),
    ]

PICONINFOEX = Ptr("<I", ICONINFOEX())

class PAINTSTRUCT(MemStruct):
    fields = [
        ("hdc", HDC()),
        ("fErase", BOOL()),
        ("rcPaint", RECT()),
        ("fRestore", BOOL()),
        ("fIncUpdate", BOOL()),
        ("rgbReserved", BYTE__32_()),
    ]

LPPAINTSTRUCT = Ptr("<I", PAINTSTRUCT())
const_PAINTSTRUCT_PTR = Ptr("<I", PAINTSTRUCT())

class SCROLLBARINFO(MemStruct):
    fields = [
        ("cbSize", DWORD()),
        ("rcScrollBar", RECT()),
        ("dxyLineButton", int()),
        ("xyThumbTop", int()),
        ("xyThumbBottom", int()),
        ("reserved", int()),
        ("rgstate", DWORD__CCHILDREN_SCROLLBAR_+_1_()),
    ]

PSCROLLBARINFO = Ptr("<I", SCROLLBARINFO())
_MOUSEINPUT_Data_ = DWORD
_MOUSEEVENTF_ = DWORD

class MOUSEINPUT(MemStruct):
    fields = [
        ("dx", LONG()),
        ("dy", LONG()),
        ("mouseData", _MOUSEINPUT_Data_()),
        ("dwFlags", _MOUSEEVENTF_()),
        ("time", DWORD()),
        ("dwExtraInfo", ULONG_PTR()),
    ]

_KEYEVENTF_ = DWORD

class KEYBDINPUT(MemStruct):
    fields = [
        ("wVk", _VirtKeyCode_()),
        ("wScan", WORD()),
        ("dwFlags", _KEYEVENTF_()),
        ("time", DWORD()),
        ("dwExtraInfo", ULONG_PTR()),
    ]


class HARDWAREINPUT(MemStruct):
    fields = [
        ("uMsg", DWORD()),
        ("wParamL", WORD()),
        ("wParamH", WORD()),
    ]

_INPUT_u_ = Union([
    ("mi", MOUSEINPUT),
    ("ki", KEYBDINPUT),
    ("hi", HARDWAREINPUT),
])
_INPUT_Type_ = DWORD

class INPUT(MemStruct):
    fields = [
        ("type", _INPUT_Type_()),
        (None, _INPUT_u_()),
    ]

LPINPUT = Ptr("<I", INPUT())
_WindowStyle_ = DWORD
_WindowExStyle_ = DWORD
_DialogStyle_ = DWORD

class DLGTEMPLATE(MemStruct):
    fields = [
        ("style", _DialogStyle_()),
        ("dwExtendedStyle", _WindowExStyle_()),
        ("cdit", WORD()),
        ("x", short()),
        ("y", short()),
        ("cx", short()),
        ("cy", short()),
    ]

LPCDLGTEMPLATE = Ptr("<I", DLGTEMPLATE())

class MSGBOXPARAMS(MemStruct):
    fields = [
        ("cbSize", UINT()),
        ("hwndOwner", HWND()),
        ("hInstance", HINSTANCE()),
        ("lpszText", LPCTSTR()),
        ("lpszCaption", LPCTSTR()),
        ("dwStyle", DWORD()),
        ("lpszIcon", LPCTSTR()),
        ("dwContextHelpId", DWORD_PTR()),
        ("lpfnMsgBoxCallback", MSGBOXCALLBACK()),
        ("dwLanguageId", DWORD()),
    ]

const_LPMSGBOXPARAMS = Ptr("<I", MSGBOXPARAMS())

class BSMINFO(MemStruct):
    fields = [
        ("cbSize", UINT()),
        ("hdesk", HDESK()),
        ("hwnd", HWND()),
        ("luid", LUID()),
    ]

PBSMINFO = Ptr("<I", BSMINFO())
_MSGFLTINFO_ = DWORD

class CHANGEFILTERSTRUCT(MemStruct):
    fields = [
        ("cbSize", DWORD()),
        ("ExtStatus", _MSGFLTINFO_()),
    ]

PCHANGEFILTERSTRUCT = Ptr("<I", CHANGEFILTERSTRUCT())

class ALTTABINFO(MemStruct):
    fields = [
        ("cbSize", DWORD()),
        ("cItems", int()),
        ("cColumns", int()),
        ("cRows", int()),
        ("iColFocus", int()),
        ("iRowFocus", int()),
        ("cxItem", int()),
        ("cyItem", int()),
        ("ptStart", POINT()),
    ]

PALTTABINFO = Ptr("<I", ALTTABINFO())
_GUITHREADINFO_Flags_ = DWORD

class GUITHREADINFO(MemStruct):
    fields = [
        ("cbSize", DWORD()),
        ("flags", _GUITHREADINFO_Flags_()),
        ("hwndActive", HWND()),
        ("hwndFocus", HWND()),
        ("hwndCapture", HWND()),
        ("hwndMenuOwner", HWND()),
        ("hwndMoveSize", HWND()),
        ("hwndCaret", HWND()),
        ("rcCaret", RECT()),
    ]

LPGUITHREADINFO = Ptr("<I", GUITHREADINFO())

class WINDOWINFO(MemStruct):
    fields = [
        ("cbSize", DWORD()),
        ("rcWindow", RECT()),
        ("rcClient", RECT()),
        ("dwStyle", _WindowStyle_()),
        ("dwExStyle", _WindowExStyle_()),
        ("dwWindowStatus", DWORD()),
        ("cxWindowBorders", UINT()),
        ("cyWindowBorders", UINT()),
        ("atomWindowType", ATOM()),
        ("wCreatorVersion", WORD()),
    ]

PWINDOWINFO = Ptr("<I", WINDOWINFO())
_WPF_Flags_ = UINT

class WINDOWPLACEMENT(MemStruct):
    fields = [
        ("length", UINT()),
        ("flags", _WPF_Flags_()),
        ("showCmd", UINT()),
        ("ptMinPosition", POINT()),
        ("ptMaxPosition", POINT()),
        ("rcNormalPosition", RECT()),
    ]

WINDOWPLACEMENT_PTR = Ptr("<I", WINDOWPLACEMENT())

class UPDATELAYEREDWINDOWINFO(MemStruct):
    fields = [
        ("cbSize", DWORD()),
        ("hdcDst", HDC()),
        ("pptDst", const_POINT_PTR()),
        ("psize", const_SIZE_PTR()),
        ("hdcSrc", HDC()),
        ("pptSrc", const_POINT_PTR()),
        ("crKey", COLORREF()),
        ("pblend", const_BLENDFUNCTION_PTR()),
        ("dwFlags", DWORD()),
        ("prcDirty", const_RECT_PTR()),
    ]

const_UPDATELAYEREDWINDOWINFO_PTR = Ptr("<I", UPDATELAYEREDWINDOWINFO())

class COMBOBOXINFO(MemStruct):
    fields = [
        ("cbSize", DWORD()),
        ("rcItem", RECT()),
        ("rcButton", RECT()),
        ("stateButton", DWORD()),
        ("hwndCombo", HWND()),
        ("hwndItem", HWND()),
        ("hwndList", HWND()),
    ]

PCOMBOBOXINFO = Ptr("<I", COMBOBOXINFO())
_CursorFlags_ = DWORD

class CURSORINFO(MemStruct):
    fields = [
        ("cbSize", DWORD()),
        ("flags", _CursorFlags_()),
        ("hCursor", HCURSOR()),
        ("ptScreenPos", POINT()),
    ]

PCURSORINFO = Ptr("<I", CURSORINFO())

class CONVCONTEXT(MemStruct):
    fields = [
        ("cb", UINT()),
        ("wFlags", UINT()),
        ("wCountryID", UINT()),
        ("iCodePage", _CODE_PAGE|int_()),
        ("dwLangID", DWORD()),
        ("dwSecurity", DWORD()),
        ("qos", SECURITY_QUALITY_OF_SERVICE()),
    ]

PCONVCONTEXT = Ptr("<I", CONVCONTEXT())
_CONVINFO_XTYP_ = UINT
_CONVINFO_STATUS_ = UINT
_CONVINFO_STATE_ = UINT

class CONVINFO(MemStruct):
    fields = [
        ("cb", DWORD()),
        ("hUser", DWORD_PTR()),
        ("hConvPartner", HCONV()),
        ("hszSvcPartner", HSZ()),
        ("hszServiceReq", HSZ()),
        ("hszTopic", HSZ()),
        ("hszItem", HSZ()),
        ("wFmt", UINT()),
        ("wType", _CONVINFO_XTYP_()),
        ("wStatus", _CONVINFO_STATUS_()),
        ("wConvst", _CONVINFO_STATE_()),
        ("wLastError", UINT()),
        ("hConvList", HCONVLIST()),
        ("ConvCtxt", CONVCONTEXT()),
        ("hwnd", HWND()),
        ("hwndPartner", HWND()),
    ]

PCONVINFO = Ptr("<I", CONVINFO())
_FLASHWINFO_Flags_ = DWORD

class FLASHWINFO(MemStruct):
    fields = [
        ("cbSize", UINT()),
        ("hwnd", HWND()),
        ("dwFlags", _FLASHWINFO_Flags_()),
        ("uCount", UINT()),
        ("dwTimeout", DWORD()),
    ]

PFLASHWINFO = Ptr("<I", FLASHWINFO())

class ICONINFO(MemStruct):
    fields = [
        ("fIcon", BOOL()),
        ("xHotspot", DWORD()),
        ("yHotspot", DWORD()),
        ("hbmMask", HBITMAP()),
        ("hbmColor", HBITMAP()),
    ]

PICONINFO = Ptr("<I", ICONINFO())
_ACCEL_Flags_ = BYTE

class ACCEL(MemStruct):
    fields = [
        ("fVirt", _ACCEL_Flags_()),
        ("key", _VirtKeyCode_()),
        ("cmd", WORD()),
    ]

LPACCEL = Ptr("<I", ACCEL())

class LASTINPUTINFO(MemStruct):
    fields = [
        ("cbSize", UINT()),
        ("dwTime", DWORD()),
    ]

PLASTINPUTINFO = Ptr("<I", LASTINPUTINFO())
_MENUINFO_Mask_ = DWORD
_MENUINFO_Style_ = DWORD

class MENUINFO(MemStruct):
    fields = [
        ("cbSize", DWORD()),
        ("fMask", _MENUINFO_Mask_()),
        ("dwStyle", _MENUINFO_Style_()),
        ("cyMax", UINT()),
        ("hbrBack", HBRUSH()),
        ("dwContextHelpID", DWORD()),
        ("dwMenuData", ULONG_PTR()),
    ]

LPCMENUINFO = Ptr("<I", MENUINFO())
_MENUITEMINFO_MASK_ = UINT
_MENUITEM_TYPE_ = UINT
_MENUITEM_STATE_ = UINT
_HBMMENU_ = HBITMAP

class MENUITEMINFO(MemStruct):
    fields = [
        ("cbSize", UINT()),
        ("fMask", _MENUITEMINFO_MASK_()),
        ("fType", _MENUITEM_TYPE_()),
        ("fState", _MENUITEM_STATE_()),
        ("wID", UINT()),
        ("hSubMenu", HMENU()),
        ("hbmpChecked", HBITMAP()),
        ("hbmpUnchecked", HBITMAP()),
        ("dwItemData", ULONG_PTR()),
        ("dwTypeData", LPTSTR()),
        ("cch", UINT()),
        ("hbmpItem", _HBMMENU_()),
    ]

LPMENUITEMINFO = Ptr("<I", MENUITEMINFO())
LPCMENUITEMINFO = Ptr("<I", MENUITEMINFO())

class TPMPARAMS(MemStruct):
    fields = [
        ("cbSize", UINT()),
        ("rcExclude", RECT()),
    ]

LPTPMPARAMS = Ptr("<I", TPMPARAMS())

class MOUSEMOVEPOINT(MemStruct):
    fields = [
        ("x", int()),
        ("y", int()),
        ("time", DWORD()),
        ("dwExtraInfo", ULONG_PTR()),
    ]

LPMOUSEMOVEPOINT = Ptr("<I", MOUSEMOVEPOINT())

class MONITORINFO(MemStruct):
    fields = [
        ("cbSize", DWORD()),
        ("rcMonitor", RECT()),
        ("rcWork", RECT()),
        ("dwFlags", _MONITORINFO_Flags_()),
    ]

LPMONITORINFO = Ptr("<I", MONITORINFO())
_RAWINPUTDEVICE_Flags_ = DWORD

class RAWINPUTDEVICE(MemStruct):
    fields = [
        ("usUsagePage", USHORT()),
        ("usUsage", USHORT()),
        ("dwFlags", _RAWINPUTDEVICE_Flags_()),
        ("hwndTarget", HWND()),
    ]

PRAWINPUTDEVICE = Ptr("<I", RAWINPUTDEVICE())
PCRAWINPUTDEVICE = Ptr("<I", RAWINPUTDEVICE())
_RIM_TYPE_ = DWORD

class RAWINPUTDEVICELIST(MemStruct):
    fields = [
        ("hDevice", HANDLE()),
        ("dwType", _RIM_TYPE_()),
    ]

PRAWINPUTDEVICELIST = Ptr("<I", RAWINPUTDEVICELIST())
_ClassStyle_ = UINT

class WNDCLASS(MemStruct):
    fields = [
        ("style", _ClassStyle_()),
        ("lpfnWndProc", WNDPROC()),
        ("cbClsExtra", int()),
        ("cbWndExtra", int()),
        ("hInstance", HINSTANCE()),
        ("hIcon", HICON()),
        ("hCursor", HCURSOR()),
        ("hbrBackground", HBRUSH()),
        ("lpszMenuName", LPCTSTR()),
        ("lpszClassName", LPCTSTR()),
    ]

LPWNDCLASS = Ptr("<I", WNDCLASS())
CONST_WNDCLASS_PTR = Ptr("<I", WNDCLASS())

class WNDCLASSEX(MemStruct):
    fields = [
        ("cbSize", UINT()),
        ("style", _ClassStyle_()),
        ("lpfnWndProc", WNDPROC()),
        ("cbClsExtra", int()),
        ("cbWndExtra", int()),
        ("hInstance", HINSTANCE()),
        ("hIcon", HICON()),
        ("hCursor", HCURSOR()),
        ("hbrBackground", HBRUSH()),
        ("lpszMenuName", LPCTSTR()),
        ("lpszClassName", LPCTSTR()),
        ("hIconSm", HICON()),
    ]

LPWNDCLASSEX = Ptr("<I", WNDCLASSEX())
CONST_WNDCLASSEX_PTR = Ptr("<I", WNDCLASSEX())
_WindowLongIndex_ = int
_ClassLongIndex_ = int
_SystemMetricIndex_ = int
_PeekMessageFlag_ = UINT
_QueueStatusFlag_ = DWORD
_WindowMessageFilterEnum_ = DWORD
_UserObjectInformationEnum_ = int
_GetAncestorEnum_ = UINT
_GetWindowEnum_ = UINT
_DCExFlags_ = DWORD
_EnumDisplayDevicesFlags_ = DWORD
_WinEventFlags_ = UINT
_RedrawWindowFlags_ = UINT
_AnimateWindowFlags_ = DWORD
_SetWindowPosFlags_ = UINT
_SendMessageTimeoutFlags_ = UINT
_DrawIconFlags_ = UINT
_ObjectIdEnum_ = LONG
_DrawStateFlags_ = UINT
_MenuCommandPosFlag_ = UINT
_InsertMenuFlags_ = UINT
_EnableMenuItemFlag_ = UINT
_EnableMenuItemResult_ = int
_CheckMenuItemFlag_ = UINT
_ClipboardFormat_ = UINT
_HwndInsertAfterEnum_ = HWND
_WindowsHook_ = int
_MsgWaitForMultipleObjectsFlags_ = DWORD
_KeyboardLayoutHandle_ = HKL
_KeyboardLayoutFlags_ = UINT
_MonitorFlags_ = DWORD
_ScrollWindowFlags_ = UINT
_EnumDisplaySettingsEnum_ = DWORD
_ButtonState_ = UINT
_LayeredWindowAttribute_ = DWORD
_LayeredWindowAttribute_PTR_ = Ptr("<I", _LayeredWindowAttribute_())
_UpdateLayeredWindowFlags_ = DWORD
_MapVirtualKeyType_ = UINT
_DesktopFlags_ = DWORD
_DESKTOP_ACCESS_MASK_ = ACCESS_MASK
_WindowStationAccessRights_ = DWORD
_CreateWindowStationFlags_ = DWORD
_LockSetForegroundWindowCode_ = UINT
_DeviceNotificationFlags_ = DWORD
_TrackPopupMenuFlags_ = UINT
_GetMenuDefaultItemFlags_ = UINT
_LoadImageString/LPCTSTR_ = LPCTSTR
_LoadBitmapString/LPCTSTR_ = LPCTSTR
_LoadCursorString/LPCTSTR_ = LPCTSTR
_LoadIconString/LPCTSTR_ = LPCTSTR
_CursorId_ = DWORD
_WindowRegion_ = int
_TOUCHINPUT_Flags_ = DWORD
_TOUCHINPUT_Mask_ = DWORD

class TOUCHINPUT(MemStruct):
    fields = [
        ("x", LONG()),
        ("y", LONG()),
        ("hSource", HANDLE()),
        ("dwID", DWORD()),
        ("dwFlags", _TOUCHINPUT_Flags_()),
        ("dwMask", _TOUCHINPUT_Mask_()),
        ("dwTime", DWORD()),
        ("dwExtraInfo", ULONG_PTR()),
        ("cxContact", DWORD()),
        ("cyContact", DWORD()),
    ]

PTOUCHINPUT = Ptr("<I", TOUCHINPUT())
_GestureId_ = DWORD

class GESTURECONFIG(MemStruct):
    fields = [
        ("dwID", _GestureId_()),
        ("dwWant", DWORD()),
        ("dwBlock", DWORD()),
    ]

PGESTURECONFIG = Ptr("<I", GESTURECONFIG())

class POINTS(MemStruct):
    fields = [
        ("x", SHORT()),
        ("y", SHORT()),
    ]

_GESTUREINFO_Flags_ = DWORD

class GESTUREINFO(MemStruct):
    fields = [
        ("cbSize", UINT()),
        ("dwFlags", _GESTUREINFO_Flags_()),
        ("dwID", DWORD()),
        ("hwndTarget", HWND()),
        ("ptsLocation", POINTS()),
        ("dwInstanceID", DWORD()),
        ("dwSequenceID", DWORD()),
        ("ullArguments", ULONGLONG()),
        ("cbExtraArgs", UINT()),
    ]

PGESTUREINFO = Ptr("<I", GESTUREINFO())

class RAWINPUTHEADER(MemStruct):
    fields = [
        ("dwType", _RIM_TYPE_()),
        ("dwSize", DWORD()),
        ("hDevice", HANDLE()),
        ("wParam", WPARAM()),
    ]

_RAWMOUSE_STATE_ = USHORT

class _RAWMOUSE_u_s_(MemStruct):
    fields = [
        ("usButtonFlags", _RAWMOUSE_STATE_()),
        ("usButtonData", USHORT()),
    ]

_RAWMOUSE_u_ = Union([
    ("ulButtons", ULONG),
    (None, _RAWMOUSE_u_s_),
])
_RAWMOUSE_FLAGS_ = USHORT

class RAWMOUSE(MemStruct):
    fields = [
        ("usFlags", _RAWMOUSE_FLAGS_()),
        (None, _RAWMOUSE_u_()),
        ("ulRawButtons", ULONG()),
        ("lLastX", LONG()),
        ("lLastY", LONG()),
        ("ulExtraInformation", ULONG()),
    ]

_RAWKEYBOARD_FLAGS_ = USHORT

class RAWKEYBOARD(MemStruct):
    fields = [
        ("MakeCode", USHORT()),
        ("Flags", _RAWKEYBOARD_FLAGS_()),
        ("Reserved", USHORT()),
        ("VKey", _VirtKeyCode_()),
        ("Message", _WinMsg_()),
        ("ExtraInformation", ULONG()),
    ]


class RAWHID(MemStruct):
    fields = [
        ("dwSizeHid", DWORD()),
        ("dwCount", DWORD()),
        ("bRawData", BYTE__1_()),
    ]

_RAWINPUT_u_ = Union([
    ("mouse", RAWMOUSE),
    ("keyboard", RAWKEYBOARD),
    ("hid", RAWHID),
])

class RAWINPUT(MemStruct):
    fields = [
        ("header", RAWINPUTHEADER()),
        ("data", _RAWINPUT_u_()),
    ]

PRAWINPUT = Ptr("<I", RAWINPUT())
PRAWINPUT_PTR = Ptr("<I", PRAWINPUT())
_CreateWindow_CW_ = int

class WINCOMPATTRDATA(MemStruct):
    fields = [
        ("attribute", _DwmWindowAttr_()),
        # Length is `dataSize`
        ("pData", PVOID()),
        ("dataSize", ULONG()),
    ]

WINCOMPATTRDATA_PTR = Ptr("<I", WINCOMPATTRDATA())
_TOUCH_FEEDBACK_MODE_ = UINT
POINTER_INPUT_TYPE = DWORD
POINTER_INPUT_TYPE_PTR = Ptr("<I", POINTER_INPUT_TYPE())
POINTER_FLAGS = UINT32
_POINTER_MOD_FLAGS_ = DWORD
POINTER_BUTTON_CHANGE_TYPE = UINT

class POINTER_INFO(MemStruct):
    fields = [
        ("pointerType", POINTER_INPUT_TYPE()),
        ("pointerId", UINT32()),
        ("frameId", UINT32()),
        ("pointerFlags", POINTER_FLAGS()),
        ("sourceDevice", HANDLE()),
        ("hwndTarget", HWND()),
        ("ptPixelLocation", POINT()),
        ("ptHimetricLocation", POINT()),
        ("ptPixelLocationRaw", POINT()),
        ("ptHimetricLocationRaw", POINT()),
        ("dwTime", DWORD()),
        ("historyCount", UINT32()),
        ("InputData", INT32()),
        ("dwKeyStates", DWORD()),
        ("PerformanceCount", UINT64()),
        ("ButtonChangeType", POINTER_BUTTON_CHANGE_TYPE()),
    ]

POINTER_INFO_PTR = Ptr("<I", POINTER_INFO())
const_POINTER_INFO_PTR = Ptr("<I", POINTER_INFO())
TOUCH_FLAGS = UINT32
TOUCH_MASK = UINT32

class POINTER_TOUCH_INFO(MemStruct):
    fields = [
        ("pointerInfo", POINTER_INFO()),
        ("touchFlags", TOUCH_FLAGS()),
        ("touchMask", TOUCH_MASK()),
        ("rcContact", RECT()),
        ("rcContactRaw", RECT()),
        ("orientation", UINT32()),
        ("pressure", UINT32()),
    ]

POINTER_TOUCH_INFO_PTR = Ptr("<I", POINTER_TOUCH_INFO())
const_POINTER_TOUCH_INFO_PTR = Ptr("<I", POINTER_TOUCH_INFO())
CROSS_SLIDE_THRESHOLD = UINT
INERTIA_PARAMETER = UINT
INTERACTION_STATE = UINT
INTERACTION_STATE_PTR = Ptr("<I", INTERACTION_STATE())
INTERACTION_CONTEXT_PROPERTY = UINT

class CROSS_SLIDE_PARAMETER(MemStruct):
    fields = [
        ("threshold", CROSS_SLIDE_THRESHOLD()),
        ("distance", float()),
    ]

CROSS_SLIDE_PARAMETER_PTR = Ptr("<I", CROSS_SLIDE_PARAMETER())
MOUSE_WHEEL_PARAMETER = UINT
INTERACTION_ID = UINT
INTERACTION_CONFIGURATION_FLAGS = UINT

class INTERACTION_CONTEXT_CONFIGURATION(MemStruct):
    fields = [
        ("interactionId", INTERACTION_ID()),
        ("enable", INTERACTION_CONFIGURATION_FLAGS()),
    ]

INTERACTION_CONTEXT_CONFIGURATION_PTR = Ptr("<I", INTERACTION_CONTEXT_CONFIGURATION())
const_INTERACTION_CONTEXT_CONFIGURATION_PTR = Ptr("<I", INTERACTION_CONTEXT_CONFIGURATION())
PEN_FLAGS = UINT32
PEN_MASK = UINT32

class POINTER_PEN_INFO(MemStruct):
    fields = [
        ("pointerInfo", POINTER_INFO()),
        ("penFlags", PEN_FLAGS()),
        ("penMask", PEN_MASK()),
        ("pressure", UINT32()),
        ("rotation", UINT32()),
        ("tiltX", INT32()),
        ("tiltY", INT32()),
    ]

POINTER_PEN_INFO_PTR = Ptr("<I", POINTER_PEN_INFO())

class TOUCH_HIT_TESTING_INPUT(MemStruct):
    fields = [
        ("pointerId", UINT32()),
        ("point", POINT()),
        ("boundingBox", RECT()),
        ("nonOccludedBoundingBox", RECT()),
        ("orientation", UINT32()),
    ]

const_TOUCH_HIT_TESTING_INPUT_PTR = Ptr("<I", TOUCH_HIT_TESTING_INPUT())

class TOUCH_HIT_TESTING_PROXIMITY_EVALUATION(MemStruct):
    fields = [
        ("score", UINT16()),
        ("adjustedPoint", POINT()),
    ]

TOUCH_HIT_TESTING_PROXIMITY_EVALUATION_PTR = Ptr("<I", TOUCH_HIT_TESTING_PROXIMITY_EVALUATION())
const_TOUCH_HIT_TESTING_PROXIMITY_EVALUATION_PTR = Ptr("<I", TOUCH_HIT_TESTING_PROXIMITY_EVALUATION())
INPUT_MESSAGE_DEVICE_TYPE = UINT
INPUT_MESSAGE_ORIGIN_ID = UINT

class INPUT_MESSAGE_SOURCE(MemStruct):
    fields = [
        ("deviceType", INPUT_MESSAGE_DEVICE_TYPE()),
        ("originId", INPUT_MESSAGE_ORIGIN_ID()),
    ]

INPUT_MESSAGE_SOURCE_PTR = Ptr("<I", INPUT_MESSAGE_SOURCE())
POINTER_DEVICE_TYPE = UINT

class POINTER_DEVICE_INFO(MemStruct):
    fields = [
        ("displayOrientation", DWORD()),
        ("device", HANDLE()),
        ("pointerDeviceType", POINTER_DEVICE_TYPE()),
        ("monitor", HMONITOR()),
        ("startingCursorId", ULONG()),
        ("maxActiveContacts", USHORT()),
        ("productString", WCHAR__POINTER_DEVICE_PRODUCT_STRING_MAX_()),
    ]

POINTER_DEVICE_INFO_PTR = Ptr("<I", POINTER_DEVICE_INFO())
POINTER_DEVICE_CURSOR_TYPE = UINT

class POINTER_DEVICE_CURSOR_INFO(MemStruct):
    fields = [
        ("cursorId", UINT32()),
        ("cursor", POINTER_DEVICE_CURSOR_TYPE()),
    ]

POINTER_DEVICE_CURSOR_INFO_PTR = Ptr("<I", POINTER_DEVICE_CURSOR_INFO())

class POINTER_DEVICE_PROPERTY(MemStruct):
    fields = [
        ("logicalMin", INT32()),
        ("logicalMax", INT32()),
        ("physicalMin", INT32()),
        ("physicalMax", INT32()),
        ("unit", UINT32()),
        ("unitExponent", UINT32()),
        ("usagePageId", USHORT()),
        ("usageId", USHORT()),
    ]

POINTER_DEVICE_PROPERTY_PTR = Ptr("<I", POINTER_DEVICE_PROPERTY())
_TIMERV_COALESCING_ = ULONG
FEEDBACK_TYPE = UINT

class DEVICE_NOTIFY_SUBSCRIBE_PARAMETERS(MemStruct):
    fields = [
        ("Callback", PDEVICE_NOTIFY_CALLBACK_ROUTINE()),
        ("Context", PVOID()),
    ]

PDEVICE_NOTIFY_SUBSCRIBE_PARAMETERS = Ptr("<I", DEVICE_NOTIFY_SUBSCRIBE_PARAMETERS())
_DDE_INITIALIZE_FLAGS_ = DWORD
_MSGFLT_ACTION_ = DWORD
_CWP_FLAGS_ = UINT
_MDITILE_TILE_ = UINT
_MDITILE_CASCADE_ = UINT
_GWFS_FLAGS_ = DWORD

###################

###### Functions ######

def user32_CreateDialogIndirectParam(jitter, get_str, set_str):
    """
    HWND CreateDialogIndirectParam(
        HINSTANCE hInstance,
        LPCDLGTEMPLATE lpTemplate,
        HWND hWndParent,
        DLGPROC lpDialogFunc,
        LPARAM lParamInit
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hInstance", "lpTemplate", "hWndParent", "lpDialogFunc", "lParamInit"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CreateDialogIndirectParamA(jitter):
    user32_CreateDialogIndirectParam(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_CreateDialogIndirectParamW(jitter):
    user32_CreateDialogIndirectParam(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_CreateDialogParam(jitter, get_str, set_str):
    """
    HWND CreateDialogParam(
        HINSTANCE hInstance,
        LPCTSTR lpTemplateName,
        HWND hWndParent,
        DLGPROC lpDialogFunc,
        LPARAM lParamInit
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hInstance", "lpTemplateName", "hWndParent", "lpDialogFunc", "lParamInit"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CreateDialogParamA(jitter):
    user32_CreateDialogParam(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_CreateDialogParamW(jitter):
    user32_CreateDialogParam(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_DefDlgProc(jitter, get_str, set_str):
    """
    LRESULT DefDlgProc(
        HWND hDlg,
        [WinMsg] Msg,
        WPARAM wParam,
        LPARAM lParam
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hDlg", "Msg", "wParam", "lParam"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DefDlgProcA(jitter):
    user32_DefDlgProc(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_DefDlgProcW(jitter):
    user32_DefDlgProc(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_DialogBoxIndirectParam(jitter, get_str, set_str):
    """
    INT_PTR DialogBoxIndirectParam(
        HINSTANCE hInstance,
        LPCDLGTEMPLATE hDialogTemplate,
        HWND hWndParent,
        DLGPROC lpDialogFunc,
        LPARAM dwInitParam
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hInstance", "hDialogTemplate", "hWndParent", "lpDialogFunc", "dwInitParam"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DialogBoxIndirectParamA(jitter):
    user32_DialogBoxIndirectParam(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_DialogBoxIndirectParamW(jitter):
    user32_DialogBoxIndirectParam(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_DialogBoxParam(jitter, get_str, set_str):
    """
    INT_PTR DialogBoxParam(
        HINSTANCE hInstance,
        LPCTSTR lpTemplateName,
        HWND hWndParent,
        DLGPROC lpDialogFunc,
        LPARAM dwInitParam
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hInstance", "lpTemplateName", "hWndParent", "lpDialogFunc", "dwInitParam"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DialogBoxParamA(jitter):
    user32_DialogBoxParam(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_DialogBoxParamW(jitter):
    user32_DialogBoxParam(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_EndDialog(jitter):
    """
    BOOL EndDialog(
        HWND hDlg,
        INT_PTR nResult
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hDlg", "nResult"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetDialogBaseUnits(jitter):
    """
    LONG GetDialogBaseUnits()
    """
    ret_ad, args = jitter.func_args_stdcall([])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetDlgCtrlID(jitter):
    """
    int GetDlgCtrlID(
        HWND hwndCtl
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwndCtl"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetDlgItem(jitter):
    """
    HWND GetDlgItem(
        HWND hDlg,
        int nIDDlgItem
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hDlg", "nIDDlgItem"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetDlgItemInt(jitter):
    """
    UINT GetDlgItemInt(
        HWND hDlg,
        int nIDDlgItem,
        BOOL* lpTranslated,
        BOOL bSigned
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hDlg", "nIDDlgItem", "lpTranslated", "bSigned"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetDlgItemText(jitter, get_str, set_str):
    """
    UINT GetDlgItemText(
        HWND hDlg,
        int nIDDlgItem,
        LPTSTR lpString,
        int nMaxCount
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hDlg", "nIDDlgItem", "lpString", "nMaxCount"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetDlgItemTextA(jitter):
    user32_GetDlgItemText(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_GetDlgItemTextW(jitter):
    user32_GetDlgItemText(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_GetNextDlgGroupItem(jitter):
    """
    HWND GetNextDlgGroupItem(
        HWND hDlg,
        HWND hCtl,
        BOOL bPrevious
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hDlg", "hCtl", "bPrevious"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetNextDlgTabItem(jitter):
    """
    HWND GetNextDlgTabItem(
        HWND hDlg,
        HWND hCtl,
        BOOL bPrevious
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hDlg", "hCtl", "bPrevious"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_IsDialogMessage(jitter, get_str, set_str):
    """
    BOOL IsDialogMessage(
        HWND hDlg,
        LPMSG lpMsg
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hDlg", "lpMsg"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_IsDialogMessageA(jitter):
    user32_IsDialogMessage(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_IsDialogMessageW(jitter):
    user32_IsDialogMessage(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_MapDialogRect(jitter):
    """
    BOOL MapDialogRect(
        HWND hDlg,
        LPRECT lpRect
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hDlg", "lpRect"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_MessageBox(jitter, get_str, set_str):
    """
    [MessageBoxResult] MessageBox(
        HWND hWnd,
        LPCTSTR lpText,
        LPCTSTR lpCaption,
        [MessageBoxType] uType
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "lpText", "lpCaption", "uType"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_MessageBoxA(jitter):
    user32_MessageBox(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_MessageBoxW(jitter):
    user32_MessageBox(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_MessageBoxEx(jitter, get_str, set_str):
    """
    [MessageBoxResult] MessageBoxEx(
        HWND hWnd,
        LPCTSTR lpText,
        LPCTSTR lpCaption,
        [MessageBoxType] uType,
        WORD wLanguageId
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "lpText", "lpCaption", "uType", "wLanguageId"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_MessageBoxExA(jitter):
    user32_MessageBoxEx(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_MessageBoxExW(jitter):
    user32_MessageBoxEx(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_MessageBoxIndirect(jitter, get_str, set_str):
    """
    int MessageBoxIndirect(
        const LPMSGBOXPARAMS lpMsgBoxParams
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpMsgBoxParams"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_MessageBoxIndirectA(jitter):
    user32_MessageBoxIndirect(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_MessageBoxIndirectW(jitter):
    user32_MessageBoxIndirect(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_MessageBoxTimeout(jitter, get_str, set_str):
    """
    [MessageBoxResult] MessageBoxTimeout(
        HWND hWnd,
        LPCTSTR lpText,
        LPCTSTR lpCaption,
        [MessageBoxType] uType,
        WORD wLanguageId,
        [WaitTimeout] dwMilliseconds
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "lpText", "lpCaption", "uType", "wLanguageId", "dwMilliseconds"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_MessageBoxTimeoutA(jitter):
    user32_MessageBoxTimeout(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_MessageBoxTimeoutW(jitter):
    user32_MessageBoxTimeout(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_SendDlgItemMessage(jitter, get_str, set_str):
    """
    LRESULT SendDlgItemMessage(
        HWND hDlg,
        int nIDDlgItem,
        [WinMsg] Msg,
        WPARAM wParam,
        LPARAM lParam
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hDlg", "nIDDlgItem", "Msg", "wParam", "lParam"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SendDlgItemMessageA(jitter):
    user32_SendDlgItemMessage(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_SendDlgItemMessageW(jitter):
    user32_SendDlgItemMessage(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_SetDlgItemInt(jitter):
    """
    BOOL SetDlgItemInt(
        HWND hDlg,
        int nIDDlgItem,
        UINT uValue,
        BOOL bSigned
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hDlg", "nIDDlgItem", "uValue", "bSigned"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetDlgItemText(jitter, get_str, set_str):
    """
    BOOL SetDlgItemText(
        HWND hDlg,
        int nIDDlgItem,
        LPCTSTR lpString
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hDlg", "nIDDlgItem", "lpString"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetDlgItemTextA(jitter):
    user32_SetDlgItemText(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_SetDlgItemTextW(jitter):
    user32_SetDlgItemText(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_BroadcastSystemMessage(jitter):
    """
    long BroadcastSystemMessage(
        DWORD dwFlags,
        LPDWORD lpdwRecipients,
        UINT uiMessage,
        WPARAM wParam,
        LPARAM lParam
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["dwFlags", "lpdwRecipients", "uiMessage", "wParam", "lParam"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_BroadcastSystemMessageEx(jitter, get_str, set_str):
    """
    long BroadcastSystemMessageEx(
        DWORD dwFlags,
        LPDWORD lpdwRecipients,
        UINT uiMessage,
        WPARAM wParam,
        LPARAM lParam,
        PBSMINFO pBSMInfo
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["dwFlags", "lpdwRecipients", "uiMessage", "wParam", "lParam", "pBSMInfo"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_BroadcastSystemMessageExA(jitter):
    user32_BroadcastSystemMessageEx(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_BroadcastSystemMessageExW(jitter):
    user32_BroadcastSystemMessageEx(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_DispatchMessage(jitter, get_str, set_str):
    """
    LRESULT DispatchMessage(
        const MSG* lpmsg
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpmsg"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DispatchMessageA(jitter):
    user32_DispatchMessage(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_DispatchMessageW(jitter):
    user32_DispatchMessage(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_GetInputState(jitter):
    """
    BOOL GetInputState()
    """
    ret_ad, args = jitter.func_args_stdcall([])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetMessage(jitter, get_str, set_str):
    """
    [BOOL_NUMBER] GetMessage(
        LPMSG lpMsg,
        HWND hWnd,
        UINT wMsgFilterMin,
        UINT wMsgFilterMax
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpMsg", "hWnd", "wMsgFilterMin", "wMsgFilterMax"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetMessageA(jitter):
    user32_GetMessage(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_GetMessageW(jitter):
    user32_GetMessage(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_GetMessageExtraInfo(jitter):
    """
    LPARAM GetMessageExtraInfo()
    """
    ret_ad, args = jitter.func_args_stdcall([])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetMessagePos(jitter):
    """
    DWORD GetMessagePos()
    """
    ret_ad, args = jitter.func_args_stdcall([])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetMessageTime(jitter):
    """
    LONG GetMessageTime()
    """
    ret_ad, args = jitter.func_args_stdcall([])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetQueueStatus(jitter):
    """
    DWORD GetQueueStatus(
        [QueueStatusFlag] flags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["flags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_InSendMessage(jitter):
    """
    BOOL InSendMessage()
    """
    ret_ad, args = jitter.func_args_stdcall([])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_InSendMessageEx(jitter):
    """
    DWORD InSendMessageEx(
        LPVOID lpReserved
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpReserved"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_PeekMessage(jitter, get_str, set_str):
    """
    BOOL PeekMessage(
        LPMSG lpMsg,
        HWND hWnd,
        UINT wMsgFilterMin,
        UINT wMsgFilterMax,
        [PeekMessageFlag] wRemoveMsg
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpMsg", "hWnd", "wMsgFilterMin", "wMsgFilterMax", "wRemoveMsg"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_PeekMessageA(jitter):
    user32_PeekMessage(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_PeekMessageW(jitter):
    user32_PeekMessage(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_PostMessage(jitter, get_str, set_str):
    """
    BOOL PostMessage(
        HWND hWnd,
        [WinMsg] Msg,
        WPARAM wParam,
        LPARAM lParam
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "Msg", "wParam", "lParam"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_PostMessageA(jitter):
    user32_PostMessage(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_PostMessageW(jitter):
    user32_PostMessage(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_PostQuitMessage(jitter):
    """
    VOID PostQuitMessage(
        int nExitCode
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["nExitCode"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_PostThreadMessage(jitter, get_str, set_str):
    """
    BOOL PostThreadMessage(
        DWORD idThread,
        [WinMsg] Msg,
        WPARAM wParam,
        LPARAM lParam
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["idThread", "Msg", "wParam", "lParam"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_PostThreadMessageA(jitter):
    user32_PostThreadMessage(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_PostThreadMessageW(jitter):
    user32_PostThreadMessage(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_RegisterWindowMessage(jitter, get_str, set_str):
    """
    UINT RegisterWindowMessage(
        LPCTSTR lpString
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpString"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_RegisterWindowMessageA(jitter):
    user32_RegisterWindowMessage(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_RegisterWindowMessageW(jitter):
    user32_RegisterWindowMessage(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_ReplyMessage(jitter):
    """
    BOOL ReplyMessage(
        LRESULT lResult
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lResult"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SendMessage(jitter, get_str, set_str):
    """
    LRESULT SendMessage(
        HWND hWnd,
        [WinMsg] Msg,
        WPARAM wParam,
        LPARAM lParam
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "Msg", "wParam", "lParam"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SendMessageA(jitter):
    user32_SendMessage(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_SendMessageW(jitter):
    user32_SendMessage(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_SendMessageCallback(jitter, get_str, set_str):
    """
    BOOL SendMessageCallback(
        HWND hWnd,
        [WinMsg] Msg,
        WPARAM wParam,
        LPARAM lParam,
        SENDASYNCPROC lpCallBack,
        ULONG_PTR dwData
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "Msg", "wParam", "lParam", "lpCallBack", "dwData"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SendMessageCallbackA(jitter):
    user32_SendMessageCallback(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_SendMessageCallbackW(jitter):
    user32_SendMessageCallback(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_SendMessageTimeout(jitter, get_str, set_str):
    """
    LRESULT SendMessageTimeout(
        HWND hWnd,
        [WinMsg] Msg,
        WPARAM wParam,
        LPARAM lParam,
        [SendMessageTimeoutFlags] fuFlags,
        UINT uTimeout,
        PDWORD_PTR lpdwResult
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "Msg", "wParam", "lParam", "fuFlags", "uTimeout", "lpdwResult"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SendMessageTimeoutA(jitter):
    user32_SendMessageTimeout(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_SendMessageTimeoutW(jitter):
    user32_SendMessageTimeout(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_SendNotifyMessage(jitter, get_str, set_str):
    """
    BOOL SendNotifyMessage(
        HWND hWnd,
        [WinMsg] Msg,
        WPARAM wParam,
        LPARAM lParam
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "Msg", "wParam", "lParam"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SendNotifyMessageA(jitter):
    user32_SendNotifyMessage(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_SendNotifyMessageW(jitter):
    user32_SendNotifyMessage(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_SetMessageExtraInfo(jitter):
    """
    LPARAM SetMessageExtraInfo(
        LPARAM lParam
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lParam"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_TranslateMessage(jitter):
    """
    BOOL TranslateMessage(
        const MSG* lpMsg
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpMsg"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_WaitMessage(jitter):
    """
    BOOL WaitMessage()
    """
    ret_ad, args = jitter.func_args_stdcall([])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetGuiResources(jitter):
    """
    DWORD GetGuiResources(
        [ProcessHandle] hProcess,
        DWORD uiFlags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hProcess", "uiFlags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_IsImmersiveProcess(jitter):
    """
    BOOL IsImmersiveProcess(
        HANDLE hProcess
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hProcess"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetProcessRestrictionExemption(jitter):
    """
    BOOL SetProcessRestrictionExemption(
        BOOL fEnableExemption
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["fEnableExemption"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_AttachThreadInput(jitter):
    """
    BOOL AttachThreadInput(
        DWORD idAttach,
        DWORD idAttachTo,
        BOOL fAttach
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["idAttach", "idAttachTo", "fAttach"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_WaitForInputIdle(jitter):
    """
    DWORD WaitForInputIdle(
        [ProcessHandle] hProcess,
        [WaitTimeout] dwMilliseconds
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hProcess", "dwMilliseconds"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_IsWow64Message(jitter):
    """
    BOOL IsWow64Message()
    """
    ret_ad, args = jitter.func_args_stdcall([])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_UserHandleGrantAccess(jitter):
    """
    BOOL UserHandleGrantAccess(
        HANDLE hUserHandle,
        HANDLE hJob,
        BOOL bGrant
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hUserHandle", "hJob", "bGrant"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_AdjustWindowRect(jitter):
    """
    BOOL AdjustWindowRect(
        LPRECT lpRect,
        [WindowStyle] dwStyle,
        BOOL bMenu
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpRect", "dwStyle", "bMenu"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_AdjustWindowRectEx(jitter):
    """
    BOOL AdjustWindowRectEx(
        LPRECT lpRect,
        [WindowStyle] dwStyle,
        BOOL bMenu,
        [WindowExStyle] dwExStyle
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpRect", "dwStyle", "bMenu", "dwExStyle"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_AllowActivateDetachQueuesSetFocus(jitter):
    """
    VOID AllowActivateDetachQueuesSetFocus()
    """
    ret_ad, args = jitter.func_args_stdcall([])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_AllowSetForegroundWindow(jitter):
    """
    BOOL AllowSetForegroundWindow(
        DWORD dwProcessId
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["dwProcessId"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_AnimateWindow(jitter):
    """
    BOOL AnimateWindow(
        HWND hwnd,
        DWORD dwTime,
        [AnimateWindowFlags] dwFlags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwnd", "dwTime", "dwFlags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_AnyPopup(jitter):
    """
    BOOL AnyPopup()
    """
    ret_ad, args = jitter.func_args_stdcall([])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_ArrangeIconicWindows(jitter):
    """
    UINT ArrangeIconicWindows(
        HWND hWnd
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_BeginDeferWindowPos(jitter):
    """
    HDWP BeginDeferWindowPos(
        int nNumWindows
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["nNumWindows"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_BringWindowToTop(jitter):
    """
    BOOL BringWindowToTop(
        HWND hWnd
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CalculatePopupWindowPosition(jitter):
    """
    BOOL CalculatePopupWindowPosition(
        const POINT* anchorPoint,
        const SIZE* windowSize,
        [TrackPopupMenuFlags] flags,
        RECT* excludeRect,
        RECT* popupWindowPosition
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["anchorPoint", "windowSize", "flags", "excludeRect", "popupWindowPosition"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CascadeWindows(jitter):
    """
    WORD CascadeWindows(
        HWND hwndParent,
        [MDITILE_CASCADE] wHow,
        const RECT* lpRect,
        UINT cKids,
        const HWND* lpKids
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwndParent", "wHow", "lpRect", "cKids", "lpKids"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_ChangeWindowMessageFilter(jitter):
    """
    BOOL ChangeWindowMessageFilter(
        [WinMsg] message,
        [WindowMessageFilterEnum] dwFlag
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["message", "dwFlag"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_ChangeWindowMessageFilterEx(jitter):
    """
    BOOL ChangeWindowMessageFilterEx(
        HWND hWnd,
        [WinMsg] message,
        [MSGFLT_ACTION] action,
        PCHANGEFILTERSTRUCT pChangeFilterStruct
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "message", "action", "pChangeFilterStruct"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_ChildWindowFromPoint(jitter):
    """
    HWND ChildWindowFromPoint(
        HWND hWndParent,
        POINT Point
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWndParent", "Point"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_ChildWindowFromPointEx(jitter):
    """
    HWND ChildWindowFromPointEx(
        HWND hwndParent,
        POINT pt,
        [CWP_FLAGS] uFlags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwndParent", "pt", "uFlags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CloseWindow(jitter):
    """
    BOOL CloseWindow(
        HWND hWnd
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CreateWindow(jitter, get_str, set_str):
    """
    HWND CreateWindow(
        LPCTSTR lpClassName,
        LPCTSTR lpWindowName,
        DWORD dwStyle,
        [CreateWindow_CW] x,
        [CreateWindow_CW] y,
        [CreateWindow_CW] nWidth,
        [CreateWindow_CW] nHeight,
        HWND hWndParent,
        HMENU hMenu,
        HINSTANCE hInstance,
        LPVOID lpParam
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpClassName", "lpWindowName", "dwStyle", "x", "y", "nWidth", "nHeight", "hWndParent", "hMenu", "hInstance", "lpParam"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CreateWindowA(jitter):
    user32_CreateWindow(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_CreateWindowW(jitter):
    user32_CreateWindow(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_CreateWindowEx(jitter, get_str, set_str):
    """
    HWND CreateWindowEx(
        [WindowExStyle] dwExStyle,
        LPCTSTR lpClassName,
        LPCTSTR lpWindowName,
        [WindowStyle] dwStyle,
        [CreateWindow_CW] x,
        [CreateWindow_CW] y,
        [CreateWindow_CW] nWidth,
        [CreateWindow_CW] nHeight,
        HWND hWndParent,
        HMENU hMenu,
        HINSTANCE hInstance,
        LPVOID lpParam
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["dwExStyle", "lpClassName", "lpWindowName", "dwStyle", "x", "y", "nWidth", "nHeight", "hWndParent", "hMenu", "hInstance", "lpParam"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CreateWindowExA(jitter):
    user32_CreateWindowEx(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_CreateWindowExW(jitter):
    user32_CreateWindowEx(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_DeferWindowPos(jitter):
    """
    HDWP DeferWindowPos(
        HDWP hWinPosInfo,
        HWND hWnd,
        [HwndInsertAfterEnum] hWndInsertAfter,
        int x,
        int y,
        int cx,
        int cy,
        [SetWindowPosFlags] uFlags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWinPosInfo", "hWnd", "hWndInsertAfter", "x", "y", "cx", "cy", "uFlags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DeregisterShellHookWindow(jitter):
    """
    BOOL DeregisterShellHookWindow(
        HWND hWnd
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DestroyWindow(jitter):
    """
    BOOL DestroyWindow(
        HWND hWnd
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_EndDeferWindowPos(jitter):
    """
    BOOL EndDeferWindowPos(
        HDWP hWinPosInfo
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWinPosInfo"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_EndTask(jitter):
    """
    BOOL EndTask(
        HWND hWnd,
        BOOL fShutDown,
        BOOL fForce
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "fShutDown", "fForce"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_EnumChildWindows(jitter):
    """
    BOOL EnumChildWindows(
        HWND hWndParent,
        WNDENUMPROC lpEnumFunc,
        LPARAM lParam
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWndParent", "lpEnumFunc", "lParam"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_EnumThreadWindows(jitter):
    """
    BOOL EnumThreadWindows(
        DWORD dwThreadId,
        WNDENUMPROC lpfn,
        LPARAM lParam
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["dwThreadId", "lpfn", "lParam"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_EnumWindows(jitter):
    """
    BOOL EnumWindows(
        WNDENUMPROC lpEnumFunc,
        LPARAM lParam
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpEnumFunc", "lParam"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_FindWindow(jitter, get_str, set_str):
    """
    HWND FindWindow(
        LPCTSTR lpClassName,
        LPCTSTR lpWindowName
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpClassName", "lpWindowName"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_FindWindowA(jitter):
    user32_FindWindow(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_FindWindowW(jitter):
    user32_FindWindow(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_FindWindowEx(jitter, get_str, set_str):
    """
    HWND FindWindowEx(
        HWND hwndParent,
        HWND hwndChildAfter,
        LPCTSTR lpszClass,
        LPCTSTR lpszWindow
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwndParent", "hwndChildAfter", "lpszClass", "lpszWindow"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_FindWindowExA(jitter):
    user32_FindWindowEx(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_FindWindowExW(jitter):
    user32_FindWindowEx(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_GetAltTabInfo(jitter, get_str, set_str):
    """
    BOOL GetAltTabInfo(
        HWND hwnd,
        int iItem,
        PALTTABINFO pati,
        LPTSTR pszItemText,
        UINT cchItemText
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwnd", "iItem", "pati", "pszItemText", "cchItemText"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetAltTabInfoA(jitter):
    user32_GetAltTabInfo(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_GetAltTabInfoW(jitter):
    user32_GetAltTabInfo(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_GetAncestor(jitter):
    """
    HWND GetAncestor(
        HWND hwnd,
        [GetAncestorEnum] gaFlags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwnd", "gaFlags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetClientRect(jitter):
    """
    BOOL GetClientRect(
        HWND hWnd,
        LPRECT lpRect
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "lpRect"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetDesktopWindow(jitter):
    """
    HWND GetDesktopWindow()
    """
    ret_ad, args = jitter.func_args_stdcall([])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetForegroundWindow(jitter):
    """
    HWND GetForegroundWindow()
    """
    ret_ad, args = jitter.func_args_stdcall([])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetGUIThreadInfo(jitter):
    """
    BOOL GetGUIThreadInfo(
        DWORD idThread,
        LPGUITHREADINFO lpgui
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["idThread", "lpgui"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetLastActivePopup(jitter):
    """
    HWND GetLastActivePopup(
        HWND hWnd
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetLayeredWindowAttributes(jitter):
    """
    BOOL GetLayeredWindowAttributes(
        HWND hwnd,
        COLORREF* pcrKey,
        BYTE* pbAlpha,
        [LayeredWindowAttribute*] pdwFlags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwnd", "pcrKey", "pbAlpha", "pdwFlags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetParent(jitter):
    """
    HWND GetParent(
        HWND hWnd
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetProcessDefaultLayout(jitter):
    """
    BOOL GetProcessDefaultLayout(
        DWORD* pdwDefaultLayout
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["pdwDefaultLayout"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetShellWindow(jitter):
    """
    HWND GetShellWindow()
    """
    ret_ad, args = jitter.func_args_stdcall([])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetTitleBarInfo(jitter):
    """
    BOOL GetTitleBarInfo(
        HWND hwnd,
        PTITLEBARINFO pti
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwnd", "pti"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetTopWindow(jitter):
    """
    HWND GetTopWindow(
        HWND hWnd
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetWindow(jitter):
    """
    HWND GetWindow(
        HWND hWnd,
        [GetWindowEnum] uCmd
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "uCmd"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetWindowDisplayAffinity(jitter):
    """
    BOOL GetWindowDisplayAffinity(
        HWND hWnd,
        DWORD* dwAffinity
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "dwAffinity"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetWindowInfo(jitter):
    """
    BOOL GetWindowInfo(
        HWND hwnd,
        PWINDOWINFO pwi
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwnd", "pwi"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetWindowModuleFileName(jitter, get_str, set_str):
    """
    UINT GetWindowModuleFileName(
        HWND hwnd,
        LPTSTR lpszFileName,
        UINT cchFileNameMax
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwnd", "lpszFileName", "cchFileNameMax"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetWindowModuleFileNameA(jitter):
    user32_GetWindowModuleFileName(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_GetWindowModuleFileNameW(jitter):
    user32_GetWindowModuleFileName(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_GetWindowPlacement(jitter):
    """
    BOOL GetWindowPlacement(
        HWND hWnd,
        WINDOWPLACEMENT* lpwndpl
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "lpwndpl"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetWindowRect(jitter):
    """
    BOOL GetWindowRect(
        HWND hWnd,
        LPRECT lpRect
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "lpRect"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetWindowText(jitter, get_str, set_str):
    """
    int GetWindowText(
        HWND hWnd,
        LPTSTR lpString,
        int nMaxCount
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "lpString", "nMaxCount"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetWindowTextA(jitter):
    user32_GetWindowText(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_GetWindowTextW(jitter):
    user32_GetWindowText(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_GetWindowTextLength(jitter, get_str, set_str):
    """
    int GetWindowTextLength(
        HWND hWnd
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetWindowTextLengthA(jitter):
    user32_GetWindowTextLength(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_GetWindowTextLengthW(jitter):
    user32_GetWindowTextLength(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_GetWindowThreadProcessId(jitter):
    """
    DWORD GetWindowThreadProcessId(
        HWND hWnd,
        LPDWORD lpdwProcessId
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "lpdwProcessId"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_InternalGetWindowText(jitter):
    """
    int InternalGetWindowText(
        HWND hWnd,
        LPWSTR lpString,
        int nMaxCount
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "lpString", "nMaxCount"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_IsChild(jitter):
    """
    BOOL IsChild(
        HWND hWndParent,
        HWND hWnd
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWndParent", "hWnd"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_IsGUIThread(jitter):
    """
    BOOL IsGUIThread(
        BOOL bConvert
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["bConvert"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_IsHungAppWindow(jitter):
    """
    BOOL IsHungAppWindow(
        HWND hWnd
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_IsIconic(jitter):
    """
    BOOL IsIconic(
        HWND hWnd
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_IsProcessDPIAware(jitter):
    """
    BOOL IsProcessDPIAware()
    """
    ret_ad, args = jitter.func_args_stdcall([])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_IsWindow(jitter):
    """
    BOOL IsWindow(
        HWND hWnd
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_IsWindowUnicode(jitter):
    """
    BOOL IsWindowUnicode(
        HWND hWnd
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_IsWindowVisible(jitter):
    """
    BOOL IsWindowVisible(
        HWND hWnd
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_IsZoomed(jitter):
    """
    BOOL IsZoomed(
        HWND hWnd
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_LockSetForegroundWindow(jitter):
    """
    BOOL LockSetForegroundWindow(
        [LockSetForegroundWindowCode] uLockCode
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["uLockCode"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_LogicalToPhysicalPoint(jitter):
    """
    void LogicalToPhysicalPoint(
        HWND hWnd,
        LPPOINT lpPoint
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "lpPoint"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_MoveWindow(jitter):
    """
    BOOL MoveWindow(
        HWND hWnd,
        int X,
        int Y,
        int nWidth,
        int nHeight,
        BOOL bRepaint
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "X", "Y", "nWidth", "nHeight", "bRepaint"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_OpenIcon(jitter):
    """
    BOOL OpenIcon(
        HWND hWnd
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_PhysicalToLogicalPoint(jitter):
    """
    void PhysicalToLogicalPoint(
        HWND hWnd,
        LPPOINT lpPoint
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "lpPoint"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_RealChildWindowFromPoint(jitter):
    """
    HWND RealChildWindowFromPoint(
        HWND hwndParent,
        POINT ptParentClientCoords
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwndParent", "ptParentClientCoords"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_RealGetWindowClass(jitter):
    """
    UINT RealGetWindowClass(
        HWND hwnd,
        LPTSTR pszType,
        UINT cchType
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwnd", "pszType", "cchType"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_RegisterShellHookWindow(jitter):
    """
    BOOL RegisterShellHookWindow(
        HWND hWnd
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetForegroundWindow(jitter):
    """
    BOOL SetForegroundWindow(
        HWND hWnd
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetLayeredWindowAttributes(jitter):
    """
    BOOL SetLayeredWindowAttributes(
        HWND hwnd,
        COLORREF crKey,
        BYTE bAlpha,
        [LayeredWindowAttribute] dwFlags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwnd", "crKey", "bAlpha", "dwFlags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetParent(jitter):
    """
    HWND SetParent(
        HWND hWndChild,
        HWND hWndNewParent
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWndChild", "hWndNewParent"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetProcessDefaultLayout(jitter):
    """
    BOOL SetProcessDefaultLayout(
        DWORD dwDefaultLayout
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["dwDefaultLayout"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetProcessDPIAware(jitter):
    """
    BOOL SetProcessDPIAware()
    """
    ret_ad, args = jitter.func_args_stdcall([])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetWindowDisplayAffinity(jitter):
    """
    BOOL SetWindowDisplayAffinity(
        HWND hWnd,
        DWORD dwAffinity
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "dwAffinity"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetWindowPlacement(jitter):
    """
    BOOL SetWindowPlacement(
        HWND hWnd,
        WINDOWPLACEMENT* lpwndpl
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "lpwndpl"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetWindowPos(jitter):
    """
    BOOL SetWindowPos(
        HWND hWnd,
        [HwndInsertAfterEnum] hWndInsertAfter,
        int X,
        int Y,
        int cx,
        int cy,
        [SetWindowPosFlags] uFlags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "hWndInsertAfter", "X", "Y", "cx", "cy", "uFlags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetWindowText(jitter, get_str, set_str):
    """
    BOOL SetWindowText(
        HWND hWnd,
        LPCTSTR lpString
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "lpString"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetWindowTextA(jitter):
    user32_SetWindowText(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_SetWindowTextW(jitter):
    user32_SetWindowText(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_ShowOwnedPopups(jitter):
    """
    BOOL ShowOwnedPopups(
        HWND hWnd,
        BOOL fShow
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "fShow"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_ShowWindow(jitter):
    """
    BOOL ShowWindow(
        HWND hWnd,
        [ShowWindowCmd] nCmdShow
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "nCmdShow"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_ShowWindowAsync(jitter):
    """
    BOOL ShowWindowAsync(
        HWND hWnd,
        int nCmdShow
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "nCmdShow"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SoundSentry(jitter):
    """
    BOOL SoundSentry()
    """
    ret_ad, args = jitter.func_args_stdcall([])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SwitchToThisWindow(jitter):
    """
    VOID SwitchToThisWindow(
        HWND hWnd,
        BOOL fAltTab
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "fAltTab"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_TileWindows(jitter):
    """
    WORD TileWindows(
        HWND hwndParent,
        [MDITILE_TILE] wHow,
        RECT* lpRect,
        UINT cKids,
        const HWND* lpKids
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwndParent", "wHow", "lpRect", "cKids", "lpKids"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_UpdateLayeredWindow(jitter):
    """
    BOOL UpdateLayeredWindow(
        HWND hwnd,
        HDC hdcDst,
        POINT* pptDst,
        SIZE* psize,
        HDC hdcSrc,
        POINT* pptSrc,
        COLORREF crKey,
        BLENDFUNCTION* pblend,
        [UpdateLayeredWindowFlags] dwFlags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwnd", "hdcDst", "pptDst", "psize", "hdcSrc", "pptSrc", "crKey", "pblend", "dwFlags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_UpdateLayeredWindowIndirect(jitter):
    """
    BOOL UpdateLayeredWindowIndirect(
        HWND hwnd,
        const UPDATELAYEREDWINDOWINFO* pULWInfo
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwnd", "pULWInfo"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_WindowFromPhysicalPoint(jitter):
    """
    HWND WindowFromPhysicalPoint(
        POINT Point
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["Point"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_WindowFromPoint(jitter):
    """
    HWND WindowFromPoint(
        POINT Point
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["Point"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_ExitWindowsEx(jitter):
    """
    BOOL ExitWindowsEx(
        [EWX_FLAGS] uFlags,
        [SHTDN_REASON] dwReason
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["uFlags", "dwReason"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_LockWorkStation(jitter):
    """
    BOOL LockWorkStation()
    """
    ret_ad, args = jitter.func_args_stdcall([])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_ShutdownBlockReasonCreate(jitter):
    """
    BOOL ShutdownBlockReasonCreate(
        HWND hWnd,
        LPCWSTR pwszReason
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "pwszReason"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_ShutdownBlockReasonDestroy(jitter):
    """
    BOOL ShutdownBlockReasonDestroy(
        HWND hWnd
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_ShutdownBlockReasonQuery(jitter):
    """
    BOOL ShutdownBlockReasonQuery(
        HWND hWnd,
        LPWSTR pwszBuff,
        DWORD* pcchBuff
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "pwszBuff", "pcchBuff"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_LoadBitmap(jitter, get_str, set_str):
    """
    HBITMAP LoadBitmap(
        HINSTANCE hInstance,
        [LoadBitmapString/LPCTSTR] lpBitmapName
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hInstance", "lpBitmapName"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_LoadBitmapA(jitter):
    user32_LoadBitmap(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_LoadBitmapW(jitter):
    user32_LoadBitmap(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_GetSysColorBrush(jitter):
    """
    HBRUSH GetSysColorBrush(
        [SysColorIndex] nIndex
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["nIndex"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CheckDlgButton(jitter):
    """
    BOOL CheckDlgButton(
        HWND hDlg,
        int nIDButton,
        [ButtonState] uCheck
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hDlg", "nIDButton", "uCheck"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CheckRadioButton(jitter):
    """
    BOOL CheckRadioButton(
        HWND hDlg,
        int nIDFirstButton,
        int nIDLastButton,
        int nIDCheckButton
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hDlg", "nIDFirstButton", "nIDLastButton", "nIDCheckButton"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_IsDlgButtonChecked(jitter):
    """
    [ButtonState] IsDlgButtonChecked(
        HWND hDlg,
        int nIDButton
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hDlg", "nIDButton"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CreateCaret(jitter):
    """
    BOOL CreateCaret(
        HWND hWnd,
        HBITMAP hBitmap,
        int nWidth,
        int nHeight
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "hBitmap", "nWidth", "nHeight"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DestroyCaret(jitter):
    """
    BOOL DestroyCaret()
    """
    ret_ad, args = jitter.func_args_stdcall([])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetCaretBlinkTime(jitter):
    """
    UINT GetCaretBlinkTime()
    """
    ret_ad, args = jitter.func_args_stdcall([])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetCaretPos(jitter):
    """
    BOOL GetCaretPos(
        LPPOINT lpPoint
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpPoint"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_HideCaret(jitter):
    """
    BOOL HideCaret(
        HWND hWnd
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetCaretBlinkTime(jitter):
    """
    BOOL SetCaretBlinkTime(
        UINT uMSeconds
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["uMSeconds"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetCaretPos(jitter):
    """
    BOOL SetCaretPos(
        int X,
        int Y
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["X", "Y"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_ShowCaret(jitter):
    """
    BOOL ShowCaret(
        HWND hWnd
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_AddClipboardFormatListener(jitter):
    """
    BOOL AddClipboardFormatListener(
        HWND hwnd
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwnd"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_ChangeClipboardChain(jitter):
    """
    BOOL ChangeClipboardChain(
        HWND hWndRemove,
        HWND hWndNewNext
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWndRemove", "hWndNewNext"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CloseClipboard(jitter):
    """
    BOOL CloseClipboard()
    """
    ret_ad, args = jitter.func_args_stdcall([])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CountClipboardFormats(jitter):
    """
    int CountClipboardFormats()
    """
    ret_ad, args = jitter.func_args_stdcall([])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_EmptyClipboard(jitter):
    """
    BOOL EmptyClipboard()
    """
    ret_ad, args = jitter.func_args_stdcall([])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_EnumClipboardFormats(jitter):
    """
    UINT EnumClipboardFormats(
        UINT format
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["format"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetClipboardData(jitter):
    """
    HANDLE GetClipboardData(
        [ClipboardFormat] uFormat
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["uFormat"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetClipboardFormatName(jitter, get_str, set_str):
    """
    int GetClipboardFormatName(
        UINT format,
        LPTSTR lpszFormatName,
        int cchMaxCount
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["format", "lpszFormatName", "cchMaxCount"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetClipboardFormatNameA(jitter):
    user32_GetClipboardFormatName(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_GetClipboardFormatNameW(jitter):
    user32_GetClipboardFormatName(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_GetClipboardOwner(jitter):
    """
    HWND GetClipboardOwner()
    """
    ret_ad, args = jitter.func_args_stdcall([])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetClipboardSequenceNumber(jitter):
    """
    DWORD GetClipboardSequenceNumber()
    """
    ret_ad, args = jitter.func_args_stdcall([])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetClipboardViewer(jitter):
    """
    HWND GetClipboardViewer()
    """
    ret_ad, args = jitter.func_args_stdcall([])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetOpenClipboardWindow(jitter):
    """
    HWND GetOpenClipboardWindow()
    """
    ret_ad, args = jitter.func_args_stdcall([])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetPriorityClipboardFormat(jitter):
    """
    int GetPriorityClipboardFormat(
        UINT* paFormatPriorityList,
        int cFormats
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["paFormatPriorityList", "cFormats"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetUpdatedClipboardFormats(jitter):
    """
    BOOL GetUpdatedClipboardFormats(
        PUINT lpuiFormats,
        UINT cFormats,
        PUINT pcFormatsOut
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpuiFormats", "cFormats", "pcFormatsOut"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_IsClipboardFormatAvailable(jitter):
    """
    BOOL IsClipboardFormatAvailable(
        [ClipboardFormat] format
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["format"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_OpenClipboard(jitter):
    """
    BOOL OpenClipboard(
        HWND hWndNewOwner
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWndNewOwner"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_RegisterClipboardFormat(jitter, get_str, set_str):
    """
    UINT RegisterClipboardFormat(
        LPCTSTR lpszFormat
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpszFormat"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_RegisterClipboardFormatA(jitter):
    user32_RegisterClipboardFormat(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_RegisterClipboardFormatW(jitter):
    user32_RegisterClipboardFormat(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_RemoveClipboardFormatListener(jitter):
    """
    BOOL RemoveClipboardFormatListener(
        HWND hwnd
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwnd"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetClipboardData(jitter):
    """
    HANDLE SetClipboardData(
        [ClipboardFormat] uFormat,
        HANDLE hMem
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["uFormat", "hMem"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetClipboardViewer(jitter):
    """
    HWND SetClipboardViewer(
        HWND hWndNewViewer
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWndNewViewer"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DlgDirListComboBox(jitter, get_str, set_str):
    """
    int DlgDirListComboBox(
        HWND hDlg,
        LPTSTR lpPathSpec,
        int nIDComboBox,
        int nIDStaticPath,
        UINT uFiletype
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hDlg", "lpPathSpec", "nIDComboBox", "nIDStaticPath", "uFiletype"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DlgDirListComboBoxA(jitter):
    user32_DlgDirListComboBox(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_DlgDirListComboBoxW(jitter):
    user32_DlgDirListComboBox(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_DlgDirSelectComboBoxEx(jitter, get_str, set_str):
    """
    BOOL DlgDirSelectComboBoxEx(
        HWND hDlg,
        LPTSTR lpString,
        int nCount,
        int nIDComboBox
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hDlg", "lpString", "nCount", "nIDComboBox"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DlgDirSelectComboBoxExA(jitter):
    user32_DlgDirSelectComboBoxEx(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_DlgDirSelectComboBoxExW(jitter):
    user32_DlgDirSelectComboBoxEx(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_GetComboBoxInfo(jitter):
    """
    BOOL GetComboBoxInfo(
        HWND hwndCombo,
        PCOMBOBOXINFO pcbi
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwndCombo", "pcbi"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_ClientToScreen(jitter):
    """
    BOOL ClientToScreen(
        HWND hWnd,
        LPPOINT lpPoint
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "lpPoint"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_MapWindowPoints(jitter):
    """
    int MapWindowPoints(
        HWND hWndFrom,
        HWND hWndTo,
        LPPOINT lpPoints,
        UINT cPoints
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWndFrom", "hWndTo", "lpPoints", "cPoints"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_ScreenToClient(jitter):
    """
    BOOL ScreenToClient(
        HWND hWnd,
        LPPOINT lpPoint
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "lpPoint"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_ClipCursor(jitter):
    """
    BOOL ClipCursor(
        const RECT* lpRect
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpRect"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CopyCursor(jitter):
    """
    HCURSOR CopyCursor(
        HCURSOR pcur
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["pcur"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CreateCursor(jitter):
    """
    HCURSOR CreateCursor(
        HINSTANCE hInst,
        int xHotSpot,
        int yHotSpot,
        int nWidth,
        int nHeight,
        const VOID* pvANDPlane,
        const VOID* pvXORPlane
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hInst", "xHotSpot", "yHotSpot", "nWidth", "nHeight", "pvANDPlane", "pvXORPlane"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DestroyCursor(jitter):
    """
    BOOL DestroyCursor(
        HCURSOR hCursor
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hCursor"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetClipCursor(jitter):
    """
    BOOL GetClipCursor(
        LPRECT lpRect
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpRect"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetCursor(jitter):
    """
    HCURSOR GetCursor()
    """
    ret_ad, args = jitter.func_args_stdcall([])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetCursorInfo(jitter):
    """
    BOOL GetCursorInfo(
        PCURSORINFO pci
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["pci"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetCursorPos(jitter):
    """
    BOOL GetCursorPos(
        LPPOINT lpPoint
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpPoint"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetPhysicalCursorPos(jitter):
    """
    BOOL GetPhysicalCursorPos(
        LPPOINT lpPoint
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpPoint"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_LoadCursor(jitter, get_str, set_str):
    """
    HCURSOR LoadCursor(
        HINSTANCE hInstance,
        [LoadCursorString/LPCTSTR] lpCursorName
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hInstance", "lpCursorName"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_LoadCursorA(jitter):
    user32_LoadCursor(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_LoadCursorW(jitter):
    user32_LoadCursor(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_LoadCursorFromFile(jitter, get_str, set_str):
    """
    HCURSOR LoadCursorFromFile(
        LPCTSTR lpFileName
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpFileName"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_LoadCursorFromFileA(jitter):
    user32_LoadCursorFromFile(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_LoadCursorFromFileW(jitter):
    user32_LoadCursorFromFile(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_SetCursor(jitter):
    """
    HCURSOR SetCursor(
        HCURSOR hCursor
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hCursor"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetCursorPos(jitter):
    """
    BOOL SetCursorPos(
        int X,
        int Y
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["X", "Y"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetPhysicalCursorPos(jitter):
    """
    BOOL SetPhysicalCursorPos(
        int X,
        int Y
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["X", "Y"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetSystemCursor(jitter):
    """
    BOOL SetSystemCursor(
        HCURSOR hcur,
        [CursorId] id
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hcur", "id"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_ShowCursor(jitter):
    """
    int ShowCursor(
        BOOL bShow
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["bShow"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_ChangeDisplaySettings(jitter, get_str, set_str):
    """
    LONG ChangeDisplaySettings(
        DEVMODE* lpDevMode,
        DWORD dwflags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpDevMode", "dwflags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_ChangeDisplaySettingsA(jitter):
    user32_ChangeDisplaySettings(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_ChangeDisplaySettingsW(jitter):
    user32_ChangeDisplaySettings(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_ChangeDisplaySettingsEx(jitter, get_str, set_str):
    """
    LONG ChangeDisplaySettingsEx(
        LPCTSTR lpszDeviceName,
        DEVMODE* lpDevMode,
        HWND hwnd,
        DWORD dwflags,
        LPVOID lParam
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpszDeviceName", "lpDevMode", "hwnd", "dwflags", "lParam"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_ChangeDisplaySettingsExA(jitter):
    user32_ChangeDisplaySettingsEx(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_ChangeDisplaySettingsExW(jitter):
    user32_ChangeDisplaySettingsEx(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_EnumDisplayDevices(jitter, get_str, set_str):
    """
    BOOL EnumDisplayDevices(
        LPCTSTR lpDevice,
        DWORD iDevNum,
        PDISPLAY_DEVICE lpDisplayDevice,
        [EnumDisplayDevicesFlags] dwFlags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpDevice", "iDevNum", "lpDisplayDevice", "dwFlags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_EnumDisplayDevicesA(jitter):
    user32_EnumDisplayDevices(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_EnumDisplayDevicesW(jitter):
    user32_EnumDisplayDevices(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_EnumDisplaySettings(jitter, get_str, set_str):
    """
    BOOL EnumDisplaySettings(
        LPCTSTR lpszDeviceName,
        [EnumDisplaySettingsEnum] iModeNum,
        DEVMODE* lpDevMode
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpszDeviceName", "iModeNum", "lpDevMode"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_EnumDisplaySettingsA(jitter):
    user32_EnumDisplaySettings(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_EnumDisplaySettingsW(jitter):
    user32_EnumDisplaySettings(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_EnumDisplaySettingsEx(jitter, get_str, set_str):
    """
    BOOL EnumDisplaySettingsEx(
        LPCTSTR lpszDeviceName,
        DWORD iModeNum,
        DEVMODE* lpDevMode,
        DWORD dwFlags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpszDeviceName", "iModeNum", "lpDevMode", "dwFlags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_EnumDisplaySettingsExA(jitter):
    user32_EnumDisplaySettingsEx(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_EnumDisplaySettingsExW(jitter):
    user32_EnumDisplaySettingsEx(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_GetDC(jitter):
    """
    HDC GetDC(
        HWND hWnd
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetDCEx(jitter):
    """
    HDC GetDCEx(
        HWND hWnd,
        HRGN hrgnClip,
        [DCExFlags] flags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "hrgnClip", "flags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_ReleaseDC(jitter):
    """
    int ReleaseDC(
        HWND hWnd,
        HDC hDC
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "hDC"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_RegisterDeviceNotification(jitter, get_str, set_str):
    """
    HDEVNOTIFY RegisterDeviceNotification(
        HANDLE hRecipient,
        LPVOID NotificationFilter,
        [DeviceNotificationFlags] Flags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hRecipient", "NotificationFilter", "Flags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_RegisterDeviceNotificationA(jitter):
    user32_RegisterDeviceNotification(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_RegisterDeviceNotificationW(jitter):
    user32_RegisterDeviceNotification(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_UnregisterDeviceNotification(jitter):
    """
    BOOL UnregisterDeviceNotification(
        HDEVNOTIFY Handle
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["Handle"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DdeSetQualityOfService(jitter):
    """
    BOOL DdeSetQualityOfService(
        HWND hwndClient,
        const SECURITY_QUALITY_OF_SERVICE* pqosNew,
        PSECURITY_QUALITY_OF_SERVICE pqosPrev
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwndClient", "pqosNew", "pqosPrev"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_FreeDDElParam(jitter):
    """
    BOOL FreeDDElParam(
        UINT msg,
        LPARAM lParam
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["msg", "lParam"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_ImpersonateDdeClientWindow(jitter):
    """
    BOOL ImpersonateDdeClientWindow(
        HWND hWndClient,
        HWND hWndServer
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWndClient", "hWndServer"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_PackDDElParam(jitter):
    """
    LPARAM PackDDElParam(
        UINT msg,
        UINT_PTR uiLo,
        UINT_PTR uiHi
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["msg", "uiLo", "uiHi"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_ReuseDDElParam(jitter):
    """
    LPARAM ReuseDDElParam(
        LPARAM lParam,
        UINT msgIn,
        UINT msgOut,
        UINT_PTR uiLo,
        UINT_PTR uiHi
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lParam", "msgIn", "msgOut", "uiLo", "uiHi"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_UnpackDDElParam(jitter):
    """
    BOOL UnpackDDElParam(
        UINT msg,
        LPARAM lParam,
        PUINT_PTR puiLo,
        PUINT_PTR puiHi
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["msg", "lParam", "puiLo", "puiHi"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DdeAbandonTransaction(jitter):
    """
    BOOL DdeAbandonTransaction(
        DWORD idInst,
        HCONV hConv,
        DWORD idTransaction
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["idInst", "hConv", "idTransaction"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DdeAccessData(jitter):
    """
    LPBYTE DdeAccessData(
        HDDEDATA hData,
        LPDWORD pcbDataSize
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hData", "pcbDataSize"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DdeAddData(jitter):
    """
    HDDEDATA DdeAddData(
        HDDEDATA hData,
        LPBYTE pSrc,
        DWORD cb,
        DWORD cbOff
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hData", "pSrc", "cb", "cbOff"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DdeClientTransaction(jitter):
    """
    HDDEDATA DdeClientTransaction(
        LPBYTE pData,
        DWORD cbData,
        HCONV hConv,
        HSZ hszItem,
        UINT wFmt,
        UINT wType,
        DWORD dwTimeout,
        LPDWORD pdwResult
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["pData", "cbData", "hConv", "hszItem", "wFmt", "wType", "dwTimeout", "pdwResult"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DdeCmpStringHandles(jitter):
    """
    int DdeCmpStringHandles(
        HSZ hsz1,
        HSZ hsz2
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hsz1", "hsz2"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DdeConnect(jitter):
    """
    HCONV DdeConnect(
        DWORD idInst,
        HSZ hszService,
        HSZ hszTopic,
        PCONVCONTEXT pCC
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["idInst", "hszService", "hszTopic", "pCC"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DdeConnectList(jitter):
    """
    HCONVLIST DdeConnectList(
        DWORD idInst,
        HSZ hszService,
        HSZ hszTopic,
        HCONVLIST hConvList,
        PCONVCONTEXT pCC
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["idInst", "hszService", "hszTopic", "hConvList", "pCC"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DdeCreateDataHandle(jitter):
    """
    HDDEDATA DdeCreateDataHandle(
        DWORD idInst,
        LPBYTE pSrc,
        DWORD cb,
        DWORD cbOff,
        HSZ hszItem,
        UINT wFmt,
        UINT afCmd
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["idInst", "pSrc", "cb", "cbOff", "hszItem", "wFmt", "afCmd"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DdeCreateStringHandle(jitter, get_str, set_str):
    """
    HSZ DdeCreateStringHandle(
        DWORD idInst,
        LPTSTR psz,
        [CODE_PAGE|int] iCodePage
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["idInst", "psz", "iCodePage"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DdeCreateStringHandleA(jitter):
    user32_DdeCreateStringHandle(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_DdeCreateStringHandleW(jitter):
    user32_DdeCreateStringHandle(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_DdeDisconnect(jitter):
    """
    BOOL DdeDisconnect(
        HCONV hConv
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hConv"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DdeDisconnectList(jitter):
    """
    BOOL DdeDisconnectList(
        HCONVLIST hConvList
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hConvList"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DdeEnableCallback(jitter):
    """
    BOOL DdeEnableCallback(
        DWORD idInst,
        HCONV hConv,
        UINT wCmd
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["idInst", "hConv", "wCmd"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DdeFreeDataHandle(jitter):
    """
    BOOL DdeFreeDataHandle(
        HDDEDATA hData
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hData"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DdeFreeStringHandle(jitter):
    """
    BOOL DdeFreeStringHandle(
        DWORD idInst,
        HSZ hsz
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["idInst", "hsz"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DdeGetData(jitter):
    """
    DWORD DdeGetData(
        HDDEDATA hData,
        LPBYTE pDst,
        DWORD cbMax,
        DWORD cbOff
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hData", "pDst", "cbMax", "cbOff"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DdeGetLastError(jitter):
    """
    UINT DdeGetLastError(
        DWORD idInst
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["idInst"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DdeImpersonateClient(jitter):
    """
    BOOL DdeImpersonateClient(
        HCONV hConv
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hConv"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DdeInitialize(jitter, get_str, set_str):
    """
    UINT DdeInitialize(
        LPDWORD pidInst,
        PFNCALLBACK pfnCallback,
        [DDE_INITIALIZE_FLAGS] afCmd,
        DWORD ulRes
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["pidInst", "pfnCallback", "afCmd", "ulRes"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DdeInitializeA(jitter):
    user32_DdeInitialize(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_DdeInitializeW(jitter):
    user32_DdeInitialize(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_DdeKeepStringHandle(jitter):
    """
    BOOL DdeKeepStringHandle(
        DWORD idInst,
        HSZ hsz
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["idInst", "hsz"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DdeNameService(jitter):
    """
    HDDEDATA DdeNameService(
        DWORD idInst,
        UINT hsz1,
        UINT hsz2,
        UINT afCmd
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["idInst", "hsz1", "hsz2", "afCmd"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DdePostAdvise(jitter):
    """
    BOOL DdePostAdvise(
        DWORD idInst,
        HSZ hszTopic,
        HSZ hszItem
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["idInst", "hszTopic", "hszItem"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DdeQueryConvInfo(jitter):
    """
    UINT DdeQueryConvInfo(
        HCONV hConv,
        DWORD idTransaction,
        PCONVINFO pConvInfo
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hConv", "idTransaction", "pConvInfo"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DdeQueryNextServer(jitter):
    """
    HCONV DdeQueryNextServer(
        HCONVLIST hConvList,
        HCONV hConvPrev
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hConvList", "hConvPrev"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DdeQueryString(jitter, get_str, set_str):
    """
    DWORD DdeQueryString(
        DWORD idInst,
        HSZ hsz,
        LPTSTR psz,
        DWORD cchMax,
        [CODE_PAGE|int] iCodePage
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["idInst", "hsz", "psz", "cchMax", "iCodePage"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DdeQueryStringA(jitter):
    user32_DdeQueryString(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_DdeQueryStringW(jitter):
    user32_DdeQueryString(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_DdeReconnect(jitter):
    """
    HCONV DdeReconnect(
        HCONV hConv
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hConv"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DdeSetUserHandle(jitter):
    """
    BOOL DdeSetUserHandle(
        HCONV hConv,
        DWORD id,
        DWORD_PTR hUser
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hConv", "id", "hUser"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DdeUnaccessData(jitter):
    """
    BOOL DdeUnaccessData(
        HDDEDATA hData
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hData"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DdeUninitialize(jitter):
    """
    BOOL DdeUninitialize(
        DWORD idInst
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["idInst"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_FlashWindow(jitter):
    """
    BOOL FlashWindow(
        HWND hWnd,
        BOOL bInvert
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "bInvert"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_FlashWindowEx(jitter):
    """
    BOOL FlashWindowEx(
        PFLASHWINFO pfwi
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["pfwi"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_MessageBeep(jitter):
    """
    BOOL MessageBeep(
        UINT uType
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["uType"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetLastErrorEx(jitter):
    """
    void SetLastErrorEx(
        [ERROR_CODE] dwErrCode,
        [SET_LAST_ERROR_EX_TYPE] dwType
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["dwErrCode", "dwType"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_FillRect(jitter):
    """
    int FillRect(
        HDC hDC,
        const RECT* lprc,
        HBRUSH hbr
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hDC", "lprc", "hbr"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_FrameRect(jitter):
    """
    int FrameRect(
        HDC hDC,
        const RECT* lprc,
        HBRUSH hbr
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hDC", "lprc", "hbr"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_InvertRect(jitter):
    """
    BOOL InvertRect(
        HDC hDC,
        const RECT* lprc
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hDC", "lprc"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DrawText(jitter, get_str, set_str):
    """
    int DrawText(
        HDC hDC,
        LPCTSTR lpchText,
        int nCount,
        LPRECT lpRect,
        [DrawTextFlags] uFormat
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hDC", "lpchText", "nCount", "lpRect", "uFormat"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DrawTextA(jitter):
    user32_DrawText(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_DrawTextW(jitter):
    user32_DrawText(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_DrawTextEx(jitter, get_str, set_str):
    """
    int DrawTextEx(
        HDC hdc,
        LPTSTR lpchText,
        int cchText,
        LPRECT lprc,
        [DrawTextFlags] dwDTFormat,
        LPDRAWTEXTPARAMS lpDTParams
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hdc", "lpchText", "cchText", "lprc", "dwDTFormat", "lpDTParams"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DrawTextExA(jitter):
    user32_DrawTextEx(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_DrawTextExW(jitter):
    user32_DrawTextEx(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_GetTabbedTextExtent(jitter, get_str, set_str):
    """
    DWORD GetTabbedTextExtent(
        HDC hDC,
        LPCTSTR lpString,
        int nCount,
        int nTabPositions,
        const LPINT lpnTabStopPositions
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hDC", "lpString", "nCount", "nTabPositions", "lpnTabStopPositions"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetTabbedTextExtentA(jitter):
    user32_GetTabbedTextExtent(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_GetTabbedTextExtentW(jitter):
    user32_GetTabbedTextExtent(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_TabbedTextOut(jitter, get_str, set_str):
    """
    LONG TabbedTextOut(
        HDC hDC,
        int X,
        int Y,
        LPCTSTR lpString,
        int nCount,
        int nTabPositions,
        const LPINT lpnTabStopPositions,
        int nTabOrigin
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hDC", "X", "Y", "lpString", "nCount", "nTabPositions", "lpnTabStopPositions", "nTabOrigin"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_TabbedTextOutA(jitter):
    user32_TabbedTextOut(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_TabbedTextOutW(jitter):
    user32_TabbedTextOut(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_CallMsgFilter(jitter, get_str, set_str):
    """
    BOOL CallMsgFilter(
        LPMSG lpMsg,
        int nCode
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpMsg", "nCode"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CallMsgFilterA(jitter):
    user32_CallMsgFilter(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_CallMsgFilterW(jitter):
    user32_CallMsgFilter(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_CallNextHookEx(jitter):
    """
    LRESULT CallNextHookEx(
        HHOOK hhk,
        int nCode,
        WPARAM wParam,
        LPARAM lParam
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hhk", "nCode", "wParam", "lParam"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetWindowsHookEx(jitter, get_str, set_str):
    """
    HHOOK SetWindowsHookEx(
        [WindowsHook] idHook,
        HOOKPROC lpfn,
        HINSTANCE hMod,
        DWORD dwThreadId
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["idHook", "lpfn", "hMod", "dwThreadId"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetWindowsHookExA(jitter):
    user32_SetWindowsHookEx(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_SetWindowsHookExW(jitter):
    user32_SetWindowsHookEx(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_UnhookWindowsHookEx(jitter):
    """
    BOOL UnhookWindowsHookEx(
        HHOOK hhk
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hhk"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CopyIcon(jitter):
    """
    HICON CopyIcon(
        HICON hIcon
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hIcon"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CreateIcon(jitter):
    """
    HICON CreateIcon(
        HINSTANCE hInstance,
        int nWidth,
        int nHeight,
        BYTE cPlanes,
        BYTE cBitsPixel,
        const BYTE* lpbANDbits,
        const BYTE* lpbXORbits
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hInstance", "nWidth", "nHeight", "cPlanes", "cBitsPixel", "lpbANDbits", "lpbXORbits"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CreateIconFromResource(jitter):
    """
    HICON CreateIconFromResource(
        PBYTE presbits,
        DWORD dwResSize,
        BOOL fIcon,
        DWORD dwVer
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["presbits", "dwResSize", "fIcon", "dwVer"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CreateIconFromResourceEx(jitter):
    """
    HICON CreateIconFromResourceEx(
        PBYTE pbIconBits,
        DWORD cbIconBits,
        BOOL fIcon,
        DWORD dwVersion,
        int cxDesired,
        int cyDesired,
        UINT uFlags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["pbIconBits", "cbIconBits", "fIcon", "dwVersion", "cxDesired", "cyDesired", "uFlags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CreateIconIndirect(jitter):
    """
    HICON CreateIconIndirect(
        PICONINFO piconinfo
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["piconinfo"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DestroyIcon(jitter):
    """
    BOOL DestroyIcon(
        HICON hIcon
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hIcon"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DrawIcon(jitter):
    """
    BOOL DrawIcon(
        HDC hDC,
        int X,
        int Y,
        HICON hIcon
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hDC", "X", "Y", "hIcon"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DrawIconEx(jitter):
    """
    BOOL DrawIconEx(
        HDC hdc,
        int xLeft,
        int yTop,
        HICON hIcon,
        int cxWidth,
        int cyWidth,
        UINT istepIfAniCur,
        HBRUSH hbrFlickerFreeDraw,
        [DrawIconFlags] diFlags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hdc", "xLeft", "yTop", "hIcon", "cxWidth", "cyWidth", "istepIfAniCur", "hbrFlickerFreeDraw", "diFlags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetIconInfo(jitter):
    """
    BOOL GetIconInfo(
        HICON hIcon,
        PICONINFO piconinfo
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hIcon", "piconinfo"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetIconInfoEx(jitter, get_str, set_str):
    """
    BOOL GetIconInfoEx(
        HICON hIcon,
        PICONINFOEX piconinfoex
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hIcon", "piconinfoex"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetIconInfoExA(jitter):
    user32_GetIconInfoEx(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_GetIconInfoExW(jitter):
    user32_GetIconInfoEx(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_LoadIcon(jitter, get_str, set_str):
    """
    HICON LoadIcon(
        HINSTANCE hInstance,
        [LoadIconString/LPCTSTR] lpIconName
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hInstance", "lpIconName"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_LoadIconA(jitter):
    user32_LoadIcon(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_LoadIconW(jitter):
    user32_LoadIcon(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_LookupIconIdFromDirectory(jitter):
    """
    int LookupIconIdFromDirectory(
        PBYTE presbits,
        BOOL fIcon
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["presbits", "fIcon"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_LookupIconIdFromDirectoryEx(jitter):
    """
    int LookupIconIdFromDirectoryEx(
        PBYTE presbits,
        BOOL fIcon,
        int cxDesired,
        int cyDesired,
        [LRFlags] Flags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["presbits", "fIcon", "cxDesired", "cyDesired", "Flags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_PrivateExtractIcons(jitter, get_str, set_str):
    """
    UINT PrivateExtractIcons(
        LPCTSTR lpszFile,
        int nIconIndex,
        int cxIcon,
        int cyIcon,
        HICON* phicon,
        UINT* piconid,
        UINT nIcons,
        [LRFlags] flags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpszFile", "nIconIndex", "cxIcon", "cyIcon", "phicon", "piconid", "nIcons", "flags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_PrivateExtractIconsA(jitter):
    user32_PrivateExtractIcons(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_PrivateExtractIconsW(jitter):
    user32_PrivateExtractIcons(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_CopyAcceleratorTable(jitter, get_str, set_str):
    """
    int CopyAcceleratorTable(
        HACCEL hAccelSrc,
        LPACCEL lpAccelDst,
        int cAccelEntries
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hAccelSrc", "lpAccelDst", "cAccelEntries"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CopyAcceleratorTableA(jitter):
    user32_CopyAcceleratorTable(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_CopyAcceleratorTableW(jitter):
    user32_CopyAcceleratorTable(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_CreateAcceleratorTable(jitter, get_str, set_str):
    """
    HACCEL CreateAcceleratorTable(
        LPACCEL lpaccl,
        int cEntries
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpaccl", "cEntries"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CreateAcceleratorTableA(jitter):
    user32_CreateAcceleratorTable(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_CreateAcceleratorTableW(jitter):
    user32_CreateAcceleratorTable(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_DestroyAcceleratorTable(jitter):
    """
    BOOL DestroyAcceleratorTable(
        HACCEL hAccel
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hAccel"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_LoadAccelerators(jitter, get_str, set_str):
    """
    HACCEL LoadAccelerators(
        HINSTANCE hInstance,
        LPCTSTR lpTableName
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hInstance", "lpTableName"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_LoadAcceleratorsA(jitter):
    user32_LoadAccelerators(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_LoadAcceleratorsW(jitter):
    user32_LoadAccelerators(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_TranslateAccelerator(jitter, get_str, set_str):
    """
    int TranslateAccelerator(
        HWND hWnd,
        HACCEL hAccTable,
        LPMSG lpMsg
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "hAccTable", "lpMsg"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_TranslateAcceleratorA(jitter):
    user32_TranslateAccelerator(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_TranslateAcceleratorW(jitter):
    user32_TranslateAccelerator(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_ActivateKeyboardLayout(jitter):
    """
    HKL ActivateKeyboardLayout(
        [KeyboardLayoutHandle] hkl,
        [KeyboardLayoutFlags] Flags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hkl", "Flags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_BlockInput(jitter):
    """
    BOOL BlockInput(
        BOOL fBlockIt
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["fBlockIt"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_EnableWindow(jitter):
    """
    BOOL EnableWindow(
        HWND hWnd,
        BOOL bEnable
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "bEnable"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetActiveWindow(jitter):
    """
    HWND GetActiveWindow()
    """
    ret_ad, args = jitter.func_args_stdcall([])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetAsyncKeyState(jitter):
    """
    SHORT GetAsyncKeyState(
        [VirtKeyCode] vKey
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["vKey"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetFocus(jitter):
    """
    HWND GetFocus()
    """
    ret_ad, args = jitter.func_args_stdcall([])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetKBCodePage(jitter):
    """
    UINT GetKBCodePage()
    """
    ret_ad, args = jitter.func_args_stdcall([])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetKeyboardLayout(jitter):
    """
    HKL GetKeyboardLayout(
        DWORD idThread
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["idThread"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetKeyboardLayoutList(jitter):
    """
    UINT GetKeyboardLayoutList(
        int nBuff,
        HKL* lpList
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["nBuff", "lpList"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetKeyboardLayoutName(jitter, get_str, set_str):
    """
    BOOL GetKeyboardLayoutName(
        LPTSTR pwszKLID
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["pwszKLID"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetKeyboardLayoutNameA(jitter):
    user32_GetKeyboardLayoutName(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_GetKeyboardLayoutNameW(jitter):
    user32_GetKeyboardLayoutName(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_GetKeyboardState(jitter):
    """
    BOOL GetKeyboardState(
        PBYTE lpKeyState
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpKeyState"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetKeyNameText(jitter, get_str, set_str):
    """
    int GetKeyNameText(
        LONG lParam,
        LPTSTR lpString,
        int nSize
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lParam", "lpString", "nSize"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetKeyNameTextA(jitter):
    user32_GetKeyNameText(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_GetKeyNameTextW(jitter):
    user32_GetKeyNameText(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_GetKeyState(jitter):
    """
    SHORT GetKeyState(
        [VirtKeyCode] nVirtKey
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["nVirtKey"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetLastInputInfo(jitter):
    """
    BOOL GetLastInputInfo(
        PLASTINPUTINFO plii
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["plii"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_IsWindowEnabled(jitter):
    """
    BOOL IsWindowEnabled(
        HWND hWnd
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_keybd_event(jitter):
    """
    VOID keybd_event(
        BYTE bVk,
        BYTE bScan,
        DWORD dwFlags,
        ULONG_PTR dwExtraInfo
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["bVk", "bScan", "dwFlags", "dwExtraInfo"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_LoadKeyboardLayout(jitter, get_str, set_str):
    """
    HKL LoadKeyboardLayout(
        LPCTSTR pwszKLID,
        [KeyboardLayoutFlags] Flags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["pwszKLID", "Flags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_LoadKeyboardLayoutA(jitter):
    user32_LoadKeyboardLayout(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_LoadKeyboardLayoutW(jitter):
    user32_LoadKeyboardLayout(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_MapVirtualKey(jitter, get_str, set_str):
    """
    UINT MapVirtualKey(
        UINT uCode,
        [MapVirtualKeyType] uMapType
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["uCode", "uMapType"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_MapVirtualKeyA(jitter):
    user32_MapVirtualKey(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_MapVirtualKeyW(jitter):
    user32_MapVirtualKey(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_MapVirtualKeyEx(jitter, get_str, set_str):
    """
    UINT MapVirtualKeyEx(
        UINT uCode,
        [MapVirtualKeyType] uMapType,
        HKL dwhkl
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["uCode", "uMapType", "dwhkl"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_MapVirtualKeyExA(jitter):
    user32_MapVirtualKeyEx(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_MapVirtualKeyExW(jitter):
    user32_MapVirtualKeyEx(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_OemKeyScan(jitter):
    """
    DWORD OemKeyScan(
        WORD wOemChar
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["wOemChar"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_RegisterHotKey(jitter):
    """
    BOOL RegisterHotKey(
        HWND hWnd,
        int id,
        UINT fsModifiers,
        UINT vk
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "id", "fsModifiers", "vk"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SendInput(jitter):
    """
    UINT SendInput(
        UINT nInputs,
        LPINPUT pInputs,
        int cbSize
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["nInputs", "pInputs", "cbSize"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetActiveWindow(jitter):
    """
    HWND SetActiveWindow(
        HWND hWnd
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetFocus(jitter):
    """
    HWND SetFocus(
        HWND hWnd
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetKeyboardState(jitter):
    """
    BOOL SetKeyboardState(
        LPBYTE lpKeyState
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpKeyState"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_ToAscii(jitter):
    """
    int ToAscii(
        UINT uVirtKey,
        UINT uScanCode,
        PBYTE lpKeyState,
        LPWORD lpChar,
        UINT uFlags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["uVirtKey", "uScanCode", "lpKeyState", "lpChar", "uFlags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_ToAsciiEx(jitter):
    """
    int ToAsciiEx(
        UINT uVirtKey,
        UINT uScanCode,
        PBYTE lpKeyState,
        LPWORD lpChar,
        UINT uFlags,
        HKL dwhkl
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["uVirtKey", "uScanCode", "lpKeyState", "lpChar", "uFlags", "dwhkl"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_ToUnicode(jitter):
    """
    int ToUnicode(
        UINT wVirtKey,
        UINT wScanCode,
        const PBYTE lpKeyState,
        LPWSTR pwszBuff,
        int cchBuff,
        UINT wFlags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["wVirtKey", "wScanCode", "lpKeyState", "pwszBuff", "cchBuff", "wFlags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_ToUnicodeEx(jitter):
    """
    int ToUnicodeEx(
        UINT wVirtKey,
        UINT wScanCode,
        const PBYTE lpKeyState,
        LPWSTR pwszBuff,
        int cchBuff,
        UINT wFlags,
        HKL dwhkl
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["wVirtKey", "wScanCode", "lpKeyState", "pwszBuff", "cchBuff", "wFlags", "dwhkl"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_UnloadKeyboardLayout(jitter):
    """
    BOOL UnloadKeyboardLayout(
        HKL hkl
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hkl"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_UnregisterHotKey(jitter):
    """
    BOOL UnregisterHotKey(
        HWND hWnd,
        int id
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "id"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_VkKeyScan(jitter, get_str, set_str):
    """
    SHORT VkKeyScan(
        TCHAR ch
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["ch"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_VkKeyScanA(jitter):
    user32_VkKeyScan(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_VkKeyScanW(jitter):
    user32_VkKeyScan(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_VkKeyScanEx(jitter, get_str, set_str):
    """
    SHORT VkKeyScanEx(
        TCHAR ch,
        HKL dwhkl
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["ch", "dwhkl"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_VkKeyScanExA(jitter):
    user32_VkKeyScanEx(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_VkKeyScanExW(jitter):
    user32_VkKeyScanEx(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_DlgDirList(jitter, get_str, set_str):
    """
    int DlgDirList(
        HWND hDlg,
        LPTSTR lpPathSpec,
        int nIDListBox,
        int nIDStaticPath,
        UINT uFileType
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hDlg", "lpPathSpec", "nIDListBox", "nIDStaticPath", "uFileType"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DlgDirListA(jitter):
    user32_DlgDirList(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_DlgDirListW(jitter):
    user32_DlgDirList(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_DlgDirSelectEx(jitter, get_str, set_str):
    """
    BOOL DlgDirSelectEx(
        HWND hDlg,
        LPTSTR lpString,
        int nCount,
        int nIDListBox
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hDlg", "lpString", "nCount", "nIDListBox"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DlgDirSelectExA(jitter):
    user32_DlgDirSelectEx(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_DlgDirSelectExW(jitter):
    user32_DlgDirSelectEx(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_GetListBoxInfo(jitter):
    """
    DWORD GetListBoxInfo(
        HWND hwnd
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwnd"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_AppendMenu(jitter, get_str, set_str):
    """
    BOOL AppendMenu(
        HMENU hMenu,
        UINT uFlags,
        UINT_PTR uIDNewItem,
        LPCTSTR lpNewItem
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hMenu", "uFlags", "uIDNewItem", "lpNewItem"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_AppendMenuA(jitter):
    user32_AppendMenu(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_AppendMenuW(jitter):
    user32_AppendMenu(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_CheckMenuItem(jitter):
    """
    DWORD CheckMenuItem(
        HMENU hmenu,
        UINT uIDCheckItem,
        [CheckMenuItemFlag] uCheck
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hmenu", "uIDCheckItem", "uCheck"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CheckMenuRadioItem(jitter):
    """
    BOOL CheckMenuRadioItem(
        HMENU hmenu,
        UINT idFirst,
        UINT idLast,
        UINT idCheck,
        [MenuCommandPosFlag] uFlags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hmenu", "idFirst", "idLast", "idCheck", "uFlags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CreateMenu(jitter):
    """
    HMENU CreateMenu()
    """
    ret_ad, args = jitter.func_args_stdcall([])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CreatePopupMenu(jitter):
    """
    HMENU CreatePopupMenu()
    """
    ret_ad, args = jitter.func_args_stdcall([])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DeleteMenu(jitter):
    """
    BOOL DeleteMenu(
        HMENU hMenu,
        UINT uPosition,
        [MenuCommandPosFlag] uFlags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hMenu", "uPosition", "uFlags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DestroyMenu(jitter):
    """
    BOOL DestroyMenu(
        HMENU hMenu
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hMenu"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DrawMenuBar(jitter):
    """
    BOOL DrawMenuBar(
        HWND hWnd
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_EnableMenuItem(jitter):
    """
    [EnableMenuItemResult] EnableMenuItem(
        HMENU hMenu,
        UINT uIDEnableItem,
        [EnableMenuItemFlag] uEnable
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hMenu", "uIDEnableItem", "uEnable"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_EndMenu(jitter):
    """
    BOOL EndMenu()
    """
    ret_ad, args = jitter.func_args_stdcall([])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetMenu(jitter):
    """
    HMENU GetMenu(
        HWND hWnd
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetMenuBarInfo(jitter):
    """
    BOOL GetMenuBarInfo(
        HWND hwnd,
        [ObjectIdEnum] idObject,
        LONG idItem,
        PMENUBARINFO pmbi
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwnd", "idObject", "idItem", "pmbi"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetMenuCheckMarkDimensions(jitter):
    """
    LONG GetMenuCheckMarkDimensions()
    """
    ret_ad, args = jitter.func_args_stdcall([])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetMenuDefaultItem(jitter):
    """
    UINT GetMenuDefaultItem(
        HMENU hMenu,
        UINT fByPos,
        [GetMenuDefaultItemFlags] gmdiFlags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hMenu", "fByPos", "gmdiFlags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetMenuInfo(jitter):
    """
    BOOL GetMenuInfo(
        HMENU hmenu,
        LPCMENUINFO lpcmi
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hmenu", "lpcmi"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetMenuItemCount(jitter):
    """
    int GetMenuItemCount(
        HMENU hMenu
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hMenu"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetMenuItemID(jitter):
    """
    UINT GetMenuItemID(
        HMENU hMenu,
        int nPos
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hMenu", "nPos"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetMenuItemInfo(jitter, get_str, set_str):
    """
    BOOL GetMenuItemInfo(
        HMENU hMenu,
        UINT uItem,
        BOOL fByPosition,
        LPMENUITEMINFO lpmii
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hMenu", "uItem", "fByPosition", "lpmii"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetMenuItemInfoA(jitter):
    user32_GetMenuItemInfo(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_GetMenuItemInfoW(jitter):
    user32_GetMenuItemInfo(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_GetMenuItemRect(jitter):
    """
    BOOL GetMenuItemRect(
        HWND hWnd,
        HMENU hMenu,
        UINT uItem,
        LPRECT lprcItem
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "hMenu", "uItem", "lprcItem"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetMenuState(jitter):
    """
    UINT GetMenuState(
        HMENU hMenu,
        UINT uId,
        [MenuCommandPosFlag] uFlags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hMenu", "uId", "uFlags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetMenuString(jitter, get_str, set_str):
    """
    int GetMenuString(
        HMENU hMenu,
        UINT uIDItem,
        LPTSTR lpString,
        int nMaxCount,
        UINT uFlag
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hMenu", "uIDItem", "lpString", "nMaxCount", "uFlag"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetMenuStringA(jitter):
    user32_GetMenuString(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_GetMenuStringW(jitter):
    user32_GetMenuString(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_GetSubMenu(jitter):
    """
    HMENU GetSubMenu(
        HMENU hMenu,
        int nPos
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hMenu", "nPos"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetSystemMenu(jitter):
    """
    HMENU GetSystemMenu(
        HWND hWnd,
        BOOL bRevert
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "bRevert"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_HiliteMenuItem(jitter):
    """
    BOOL HiliteMenuItem(
        HWND hwnd,
        HMENU hmenu,
        UINT uItemHilite,
        UINT uHilite
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwnd", "hmenu", "uItemHilite", "uHilite"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_InsertMenu(jitter, get_str, set_str):
    """
    BOOL InsertMenu(
        HMENU hMenu,
        UINT uPosition,
        [InsertMenuFlags] uFlags,
        UINT_PTR uIDNewItem,
        LPCTSTR lpNewItem
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hMenu", "uPosition", "uFlags", "uIDNewItem", "lpNewItem"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_InsertMenuA(jitter):
    user32_InsertMenu(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_InsertMenuW(jitter):
    user32_InsertMenu(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_InsertMenuItem(jitter, get_str, set_str):
    """
    BOOL InsertMenuItem(
        HMENU hMenu,
        UINT uItem,
        BOOL fByPosition,
        LPCMENUITEMINFO lpmii
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hMenu", "uItem", "fByPosition", "lpmii"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_InsertMenuItemA(jitter):
    user32_InsertMenuItem(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_InsertMenuItemW(jitter):
    user32_InsertMenuItem(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_IsMenu(jitter):
    """
    BOOL IsMenu(
        HMENU hMenu
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hMenu"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_LoadMenu(jitter, get_str, set_str):
    """
    HMENU LoadMenu(
        HINSTANCE hInstance,
        LPCTSTR lpMenuName
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hInstance", "lpMenuName"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_LoadMenuA(jitter):
    user32_LoadMenu(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_LoadMenuW(jitter):
    user32_LoadMenu(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_LoadMenuIndirect(jitter, get_str, set_str):
    """
    HMENU LoadMenuIndirect(
        CONST MENUTEMPLATE* lpMenuTemplate
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpMenuTemplate"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_LoadMenuIndirectA(jitter):
    user32_LoadMenuIndirect(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_LoadMenuIndirectW(jitter):
    user32_LoadMenuIndirect(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_MenuItemFromPoint(jitter):
    """
    int MenuItemFromPoint(
        HWND hWnd,
        HMENU hMenu,
        POINT ptScreen
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "hMenu", "ptScreen"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_ModifyMenu(jitter, get_str, set_str):
    """
    BOOL ModifyMenu(
        HMENU hMnu,
        UINT uPosition,
        UINT uFlags,
        UINT_PTR uIDNewItem,
        LPCTSTR lpNewItem
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hMnu", "uPosition", "uFlags", "uIDNewItem", "lpNewItem"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_ModifyMenuA(jitter):
    user32_ModifyMenu(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_ModifyMenuW(jitter):
    user32_ModifyMenu(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_RemoveMenu(jitter):
    """
    BOOL RemoveMenu(
        HMENU hMenu,
        UINT uPosition,
        [MenuCommandPosFlag] uFlags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hMenu", "uPosition", "uFlags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetMenu(jitter):
    """
    BOOL SetMenu(
        HWND hWnd,
        HMENU hMenu
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "hMenu"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetMenuDefaultItem(jitter):
    """
    BOOL SetMenuDefaultItem(
        HMENU hMenu,
        UINT uItem,
        UINT fByPos
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hMenu", "uItem", "fByPos"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetMenuInfo(jitter):
    """
    BOOL SetMenuInfo(
        HMENU hmenu,
        LPCMENUINFO lpcmi
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hmenu", "lpcmi"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetMenuItemBitmaps(jitter):
    """
    BOOL SetMenuItemBitmaps(
        HMENU hMenu,
        UINT uPosition,
        UINT uFlags,
        HBITMAP hBitmapUnchecked,
        HBITMAP hBitmapChecked
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hMenu", "uPosition", "uFlags", "hBitmapUnchecked", "hBitmapChecked"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetMenuItemInfo(jitter, get_str, set_str):
    """
    BOOL SetMenuItemInfo(
        HMENU hMenu,
        UINT uItem,
        BOOL fByPosition,
        LPMENUITEMINFO lpmii
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hMenu", "uItem", "fByPosition", "lpmii"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetMenuItemInfoA(jitter):
    user32_SetMenuItemInfo(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_SetMenuItemInfoW(jitter):
    user32_SetMenuItemInfo(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_TrackPopupMenu(jitter):
    """
    BOOL TrackPopupMenu(
        HMENU hMenu,
        [TrackPopupMenuFlags] uFlags,
        int x,
        int y,
        int nReserved,
        HWND hWnd,
        CONST RECT* prcRect
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hMenu", "uFlags", "x", "y", "nReserved", "hWnd", "prcRect"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_TrackPopupMenuEx(jitter):
    """
    BOOL TrackPopupMenuEx(
        HMENU hmenu,
        [TrackPopupMenuFlags] fuFlags,
        int x,
        int y,
        HWND hwnd,
        LPTPMPARAMS lptpm
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hmenu", "fuFlags", "x", "y", "hwnd", "lptpm"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DragDetect(jitter):
    """
    BOOL DragDetect(
        HWND hwnd,
        POINT pt
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwnd", "pt"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetCapture(jitter):
    """
    HWND GetCapture()
    """
    ret_ad, args = jitter.func_args_stdcall([])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetDoubleClickTime(jitter):
    """
    UINT GetDoubleClickTime()
    """
    ret_ad, args = jitter.func_args_stdcall([])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetMouseMovePointsEx(jitter):
    """
    int GetMouseMovePointsEx(
        UINT cbSize,
        LPMOUSEMOVEPOINT lppt,
        LPMOUSEMOVEPOINT lpptBuf,
        int nBufPoints,
        DWORD resolution
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["cbSize", "lppt", "lpptBuf", "nBufPoints", "resolution"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_mouse_event(jitter):
    """
    VOID mouse_event(
        DWORD dwFlags,
        DWORD dx,
        DWORD dy,
        DWORD dwData,
        ULONG_PTR dwExtraInfo
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["dwFlags", "dx", "dy", "dwData", "dwExtraInfo"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_ReleaseCapture(jitter):
    """
    BOOL ReleaseCapture()
    """
    ret_ad, args = jitter.func_args_stdcall([])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetCapture(jitter):
    """
    HWND SetCapture(
        HWND hWnd
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetDoubleClickTime(jitter):
    """
    BOOL SetDoubleClickTime(
        UINT uInterval
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["uInterval"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SwapMouseButton(jitter):
    """
    BOOL SwapMouseButton(
        BOOL fSwap
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["fSwap"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_TrackMouseEvent(jitter):
    """
    BOOL TrackMouseEvent(
        LPTRACKMOUSEEVENT lpEventTrack
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpEventTrack"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_EnumDisplayMonitors(jitter):
    """
    BOOL EnumDisplayMonitors(
        HDC hdc,
        LPCRECT lprcClip,
        MONITORENUMPROC lpfnEnum,
        LPARAM dwData
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hdc", "lprcClip", "lpfnEnum", "dwData"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetMonitorInfo(jitter, get_str, set_str):
    """
    BOOL GetMonitorInfo(
        HMONITOR hMonitor,
        LPMONITORINFO lpmi
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hMonitor", "lpmi"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetMonitorInfoA(jitter):
    user32_GetMonitorInfo(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_GetMonitorInfoW(jitter):
    user32_GetMonitorInfo(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_MonitorFromPoint(jitter):
    """
    HMONITOR MonitorFromPoint(
        POINT pt,
        [MonitorFlags] dwFlags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["pt", "dwFlags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_MonitorFromRect(jitter):
    """
    HMONITOR MonitorFromRect(
        LPCRECT lprc,
        [MonitorFlags] dwFlags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lprc", "dwFlags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_MonitorFromWindow(jitter):
    """
    HMONITOR MonitorFromWindow(
        HWND hwnd,
        [MonitorFlags] dwFlags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwnd", "dwFlags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CreateMDIWindow(jitter, get_str, set_str):
    """
    HWND CreateMDIWindow(
        LPCTSTR lpClassName,
        LPCTSTR lpWindowName,
        DWORD dwStyle,
        int X,
        int Y,
        int nWidth,
        int nHeight,
        HWND hWndParent,
        HINSTANCE hInstance,
        LPARAM lParam
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpClassName", "lpWindowName", "dwStyle", "X", "Y", "nWidth", "nHeight", "hWndParent", "hInstance", "lParam"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CreateMDIWindowA(jitter):
    user32_CreateMDIWindow(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_CreateMDIWindowW(jitter):
    user32_CreateMDIWindow(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_DefFrameProc(jitter, get_str, set_str):
    """
    LRESULT DefFrameProc(
        HWND hWnd,
        HWND hWndMDIClient,
        UINT uMsg,
        WPARAM wParam,
        LPARAM lParam
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "hWndMDIClient", "uMsg", "wParam", "lParam"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DefFrameProcA(jitter):
    user32_DefFrameProc(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_DefFrameProcW(jitter):
    user32_DefFrameProc(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_DefMDIChildProc(jitter, get_str, set_str):
    """
    LRESULT DefMDIChildProc(
        HWND hWnd,
        UINT uMsg,
        WPARAM wParam,
        LPARAM lParam
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "uMsg", "wParam", "lParam"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DefMDIChildProcA(jitter):
    user32_DefMDIChildProc(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_DefMDIChildProcW(jitter):
    user32_DefMDIChildProc(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_TranslateMDISysAccel(jitter):
    """
    BOOL TranslateMDISysAccel(
        HWND hWndClient,
        LPMSG lpMsg
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWndClient", "lpMsg"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_BeginPaint(jitter):
    """
    HDC BeginPaint(
        HWND hwnd,
        LPPAINTSTRUCT lpPaint
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwnd", "lpPaint"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DrawAnimatedRects(jitter):
    """
    BOOL DrawAnimatedRects(
        HWND hwnd,
        int idAni,
        const RECT* lprcFrom,
        const RECT* lprcTo
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwnd", "idAni", "lprcFrom", "lprcTo"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DrawCaption(jitter):
    """
    BOOL DrawCaption(
        HWND hwnd,
        HDC hdc,
        LPCRECT lprc,
        UINT uFlags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwnd", "hdc", "lprc", "uFlags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DrawEdge(jitter):
    """
    BOOL DrawEdge(
        HDC hdc,
        LPRECT qrc,
        [BorderEdge] edge,
        [BorderFlag] grfFlags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hdc", "qrc", "edge", "grfFlags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DrawFocusRect(jitter):
    """
    BOOL DrawFocusRect(
        HDC hDC,
        const RECT* lprc
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hDC", "lprc"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DrawFrameControl(jitter):
    """
    BOOL DrawFrameControl(
        HDC hdc,
        LPRECT lprc,
        UINT uType,
        UINT uState
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hdc", "lprc", "uType", "uState"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DrawState(jitter, get_str, set_str):
    """
    BOOL DrawState(
        HDC hdc,
        HBRUSH hbr,
        DRAWSTATEPROC lpOutputFunc,
        LPARAM lData,
        WPARAM wData,
        int x,
        int y,
        int cx,
        int cy,
        [DrawStateFlags] fuFlags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hdc", "hbr", "lpOutputFunc", "lData", "wData", "x", "y", "cx", "cy", "fuFlags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DrawStateA(jitter):
    user32_DrawState(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_DrawStateW(jitter):
    user32_DrawState(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_EndPaint(jitter):
    """
    BOOL EndPaint(
        HWND hWnd,
        const PAINTSTRUCT* lpPaint
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "lpPaint"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_ExcludeUpdateRgn(jitter):
    """
    [WindowRegion] ExcludeUpdateRgn(
        HDC hDC,
        HWND hWnd
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hDC", "hWnd"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetUpdateRect(jitter):
    """
    BOOL GetUpdateRect(
        HWND hWnd,
        LPRECT lpRect,
        BOOL bErase
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "lpRect", "bErase"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetUpdateRgn(jitter):
    """
    [WindowRegion] GetUpdateRgn(
        HWND hWnd,
        HRGN hRgn,
        BOOL bErase
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "hRgn", "bErase"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetWindowDC(jitter):
    """
    HDC GetWindowDC(
        HWND hWnd
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetWindowRgn(jitter):
    """
    [WindowRegion] GetWindowRgn(
        HWND hWnd,
        HRGN hRgn
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "hRgn"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetWindowRgnBox(jitter):
    """
    [WindowRegion] GetWindowRgnBox(
        HWND hWnd,
        LPRECT lprc
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "lprc"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GrayString(jitter, get_str, set_str):
    """
    BOOL GrayString(
        HDC hDC,
        HBRUSH hBrush,
        GRAYSTRINGPROC lpOutputFunc,
        LPARAM lpData,
        int nCount,
        int X,
        int Y,
        int nWidth,
        int nHeight
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hDC", "hBrush", "lpOutputFunc", "lpData", "nCount", "X", "Y", "nWidth", "nHeight"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GrayStringA(jitter):
    user32_GrayString(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_GrayStringW(jitter):
    user32_GrayString(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_InvalidateRect(jitter):
    """
    BOOL InvalidateRect(
        HWND hWnd,
        const RECT* lpRect,
        BOOL bErase
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "lpRect", "bErase"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_InvalidateRgn(jitter):
    """
    BOOL InvalidateRgn(
        HWND hWnd,
        HRGN hRgn,
        BOOL bErase
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "hRgn", "bErase"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_LockWindowUpdate(jitter):
    """
    BOOL LockWindowUpdate(
        HWND hWndLock
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWndLock"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_PaintDesktop(jitter):
    """
    BOOL PaintDesktop(
        HDC hdc
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hdc"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_RedrawWindow(jitter):
    """
    BOOL RedrawWindow(
        HWND hWnd,
        const RECT* lprcUpdate,
        HRGN hrgnUpdate,
        [RedrawWindowFlags] flags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "lprcUpdate", "hrgnUpdate", "flags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetWindowRgn(jitter):
    """
    int SetWindowRgn(
        HWND hWnd,
        HRGN hRgn,
        BOOL bRedraw
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "hRgn", "bRedraw"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_UpdateWindow(jitter):
    """
    BOOL UpdateWindow(
        HWND hWnd
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_ValidateRect(jitter):
    """
    BOOL ValidateRect(
        HWND hWnd,
        const RECT* lpRect
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "lpRect"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_ValidateRgn(jitter):
    """
    BOOL ValidateRgn(
        HWND hWnd,
        HRGN hRgn
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "hRgn"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_WindowFromDC(jitter):
    """
    HWND WindowFromDC(
        HDC hDC
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hDC"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_RegisterPowerSettingNotification(jitter):
    """
    HPOWERNOTIFY RegisterPowerSettingNotification(
        HANDLE hRecipient,
        LPCGUID PowerSettingGuid,
        [DeviceNotificationFlags] Flags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hRecipient", "PowerSettingGuid", "Flags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_UnregisterPowerSettingNotification(jitter):
    """
    BOOL UnregisterPowerSettingNotification(
        HPOWERNOTIFY Handle
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["Handle"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_PrintWindow(jitter):
    """
    BOOL PrintWindow(
        HWND hwnd,
        HDC hdcBlt,
        UINT nFlags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwnd", "hdcBlt", "nFlags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DefRawInputProc(jitter):
    """
    LRESULT DefRawInputProc(
        PRAWINPUT* paRawInput,
        INT nInput,
        UINT cbSizeHeader
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["paRawInput", "nInput", "cbSizeHeader"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetRawInputBuffer(jitter):
    """
    UINT GetRawInputBuffer(
        PRAWINPUT pData,
        PUINT pcbSize,
        UINT cbSizeHeader
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["pData", "pcbSize", "cbSizeHeader"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetRawInputData(jitter):
    """
    UINT GetRawInputData(
        HRAWINPUT hRawInput,
        UINT uiCommand,
        LPVOID pData,
        PUINT pcbSize,
        UINT cbSizeHeader
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hRawInput", "uiCommand", "pData", "pcbSize", "cbSizeHeader"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetRawInputDeviceInfo(jitter, get_str, set_str):
    """
    UINT GetRawInputDeviceInfo(
        HANDLE hDevice,
        UINT uiCommand,
        LPVOID pData,
        PUINT pcbSize
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hDevice", "uiCommand", "pData", "pcbSize"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetRawInputDeviceInfoA(jitter):
    user32_GetRawInputDeviceInfo(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_GetRawInputDeviceInfoW(jitter):
    user32_GetRawInputDeviceInfo(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_GetRawInputDeviceList(jitter):
    """
    UINT GetRawInputDeviceList(
        PRAWINPUTDEVICELIST pRawInputDeviceList,
        PUINT puiNumDevices,
        UINT cbSize
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["pRawInputDeviceList", "puiNumDevices", "cbSize"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetRegisteredRawInputDevices(jitter):
    """
    UINT GetRegisteredRawInputDevices(
        PRAWINPUTDEVICE pRawInputDevices,
        PUINT puiNumDevices,
        UINT cbSize
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["pRawInputDevices", "puiNumDevices", "cbSize"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_RegisterRawInputDevices(jitter):
    """
    BOOL RegisterRawInputDevices(
        PCRAWINPUTDEVICE pRawInputDevices,
        UINT uiNumDevices,
        UINT cbSize
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["pRawInputDevices", "uiNumDevices", "cbSize"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CopyRect(jitter):
    """
    BOOL CopyRect(
        LPRECT lprcDst,
        const RECT* lprcSrc
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lprcDst", "lprcSrc"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_EqualRect(jitter):
    """
    BOOL EqualRect(
        const RECT* lprc1,
        const RECT* lprc2
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lprc1", "lprc2"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_InflateRect(jitter):
    """
    BOOL InflateRect(
        LPRECT lprc,
        int dx,
        int dy
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lprc", "dx", "dy"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_IntersectRect(jitter):
    """
    BOOL IntersectRect(
        LPRECT lprcDst,
        const RECT* lprcSrc1,
        const RECT* lprcSrc2
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lprcDst", "lprcSrc1", "lprcSrc2"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_IsRectEmpty(jitter):
    """
    BOOL IsRectEmpty(
        const RECT* lprc
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lprc"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_OffsetRect(jitter):
    """
    BOOL OffsetRect(
        LPRECT lprc,
        int dx,
        int dy
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lprc", "dx", "dy"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_PtInRect(jitter):
    """
    BOOL PtInRect(
        const RECT* lprc,
        POINT pt
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lprc", "pt"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetRect(jitter):
    """
    BOOL SetRect(
        LPRECT lprc,
        int xLeft,
        int yTop,
        int xRight,
        int yBottom
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lprc", "xLeft", "yTop", "xRight", "yBottom"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetRectEmpty(jitter):
    """
    BOOL SetRectEmpty(
        LPRECT lprc
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lprc"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SubtractRect(jitter):
    """
    BOOL SubtractRect(
        LPRECT lprcDst,
        const RECT* lprcSrc1,
        const RECT* lprcSrc2
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lprcDst", "lprcSrc1", "lprcSrc2"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_UnionRect(jitter):
    """
    BOOL UnionRect(
        LPRECT lprcDst,
        const RECT* lprcSrc1,
        const RECT* lprcSrc2
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lprcDst", "lprcSrc1", "lprcSrc2"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CopyImage(jitter):
    """
    HANDLE CopyImage(
        HANDLE hImage,
        [ImageType] uType,
        int cxDesired,
        int cyDesired,
        [LRFlags] fuFlags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hImage", "uType", "cxDesired", "cyDesired", "fuFlags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_LoadImage(jitter, get_str, set_str):
    """
    HANDLE LoadImage(
        HINSTANCE hinst,
        [LoadImageString/LPCTSTR] lpszName,
        [ImageType] uType,
        int cxDesired,
        int cyDesired,
        [LRFlags] fuLoad
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hinst", "lpszName", "uType", "cxDesired", "cyDesired", "fuLoad"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_LoadImageA(jitter):
    user32_LoadImage(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_LoadImageW(jitter):
    user32_LoadImage(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_EnableScrollBar(jitter):
    """
    BOOL EnableScrollBar(
        HWND hWnd,
        UINT wSBflags,
        UINT wArrows
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "wSBflags", "wArrows"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetScrollBarInfo(jitter):
    """
    BOOL GetScrollBarInfo(
        HWND hwnd,
        [ObjectIdEnum] idObject,
        PSCROLLBARINFO psbi
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwnd", "idObject", "psbi"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetScrollInfo(jitter):
    """
    BOOL GetScrollInfo(
        HWND hwnd,
        [SBType] fnBar,
        LPSCROLLINFO lpsi
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwnd", "fnBar", "lpsi"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetScrollPos(jitter):
    """
    int GetScrollPos(
        HWND hWnd,
        [SBType] nBar
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "nBar"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetScrollRange(jitter):
    """
    BOOL GetScrollRange(
        HWND hWnd,
        [SBType] nBar,
        LPINT lpMinPos,
        LPINT lpMaxPos
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "nBar", "lpMinPos", "lpMaxPos"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_ScrollDC(jitter):
    """
    BOOL ScrollDC(
        HDC hDC,
        int dx,
        int dy,
        const RECT* lprcScroll,
        const RECT* lprcClip,
        HRGN hrgnUpdate,
        LPRECT lprcUpdate
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hDC", "dx", "dy", "lprcScroll", "lprcClip", "hrgnUpdate", "lprcUpdate"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_ScrollWindow(jitter):
    """
    BOOL ScrollWindow(
        HWND hWnd,
        int XAmount,
        int YAmount,
        const RECT* lpRect,
        const RECT* lpClipRect
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "XAmount", "YAmount", "lpRect", "lpClipRect"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_ScrollWindowEx(jitter):
    """
    int ScrollWindowEx(
        HWND hWnd,
        int dx,
        int dy,
        const RECT* prcScroll,
        const RECT* prcClip,
        HRGN hrgnUpdate,
        LPRECT prcUpdate,
        [ScrollWindowFlags] flags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "dx", "dy", "prcScroll", "prcClip", "hrgnUpdate", "prcUpdate", "flags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetScrollInfo(jitter):
    """
    int SetScrollInfo(
        HWND hwnd,
        [SBType] fnBar,
        LPCSCROLLINFO lpsi,
        BOOL fRedraw
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwnd", "fnBar", "lpsi", "fRedraw"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetScrollPos(jitter):
    """
    int SetScrollPos(
        HWND hWnd,
        [SBType] nBar,
        int nPos,
        BOOL bRedraw
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "nBar", "nPos", "bRedraw"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetScrollRange(jitter):
    """
    BOOL SetScrollRange(
        HWND hWnd,
        [SBType] nBar,
        int nMinPos,
        int nMaxPos,
        BOOL bRedraw
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "nBar", "nMinPos", "nMaxPos", "bRedraw"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_ShowScrollBar(jitter):
    """
    BOOL ShowScrollBar(
        HWND hWnd,
        [SBType] wBar,
        BOOL bShow
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "wBar", "bShow"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CharLower(jitter, get_str, set_str):
    """
    LPTSTR CharLower(
        LPTSTR lpsz
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpsz"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CharLowerA(jitter):
    user32_CharLower(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_CharLowerW(jitter):
    user32_CharLower(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_CharLowerBuff(jitter, get_str, set_str):
    """
    DWORD CharLowerBuff(
        LPTSTR lpsz,
        DWORD cchLength
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpsz", "cchLength"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CharLowerBuffA(jitter):
    user32_CharLowerBuff(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_CharLowerBuffW(jitter):
    user32_CharLowerBuff(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_CharNext(jitter, get_str, set_str):
    """
    LPTSTR CharNext(
        LPCTSTR lpsz
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpsz"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CharNextA(jitter):
    user32_CharNext(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_CharNextW(jitter):
    user32_CharNext(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_CharNextExA(jitter):
    """
    LPSTR CharNextExA(
        [CodePageEnum] CodePage,
        LPCSTR lpCurrentChar,
        DWORD dwFlags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["CodePage", "lpCurrentChar", "dwFlags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CharPrev(jitter, get_str, set_str):
    """
    LPTSTR CharPrev(
        LPCTSTR lpszStart,
        LPCTSTR lpszCurrent
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpszStart", "lpszCurrent"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CharPrevA(jitter):
    user32_CharPrev(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_CharPrevW(jitter):
    user32_CharPrev(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_CharPrevExA(jitter):
    """
    LPSTR CharPrevExA(
        [CodePageEnum] CodePage,
        LPCSTR lpStart,
        LPCSTR lpCurrentChar,
        DWORD dwFlags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["CodePage", "lpStart", "lpCurrentChar", "dwFlags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CharToOem(jitter, get_str, set_str):
    """
    BOOL CharToOem(
        LPCTSTR lpszSrc,
        LPSTR lpszDst
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpszSrc", "lpszDst"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CharToOemA(jitter):
    user32_CharToOem(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_CharToOemW(jitter):
    user32_CharToOem(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_CharToOemBuff(jitter, get_str, set_str):
    """
    BOOL CharToOemBuff(
        LPCTSTR lpszSrc,
        LPSTR lpszDst,
        DWORD cchDstLength
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpszSrc", "lpszDst", "cchDstLength"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CharToOemBuffA(jitter):
    user32_CharToOemBuff(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_CharToOemBuffW(jitter):
    user32_CharToOemBuff(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_CharUpper(jitter, get_str, set_str):
    """
    LPTSTR CharUpper(
        LPTSTR lpsz
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpsz"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CharUpperA(jitter):
    user32_CharUpper(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_CharUpperW(jitter):
    user32_CharUpper(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_CharUpperBuff(jitter, get_str, set_str):
    """
    DWORD CharUpperBuff(
        LPTSTR lpsz,
        DWORD cchLength
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpsz", "cchLength"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CharUpperBuffA(jitter):
    user32_CharUpperBuff(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_CharUpperBuffW(jitter):
    user32_CharUpperBuff(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_IsCharAlpha(jitter, get_str, set_str):
    """
    BOOL IsCharAlpha(
        TCHAR ch
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["ch"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_IsCharAlphaA(jitter):
    user32_IsCharAlpha(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_IsCharAlphaW(jitter):
    user32_IsCharAlpha(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_IsCharAlphaNumeric(jitter, get_str, set_str):
    """
    BOOL IsCharAlphaNumeric(
        TCHAR ch
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["ch"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_IsCharAlphaNumericA(jitter):
    user32_IsCharAlphaNumeric(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_IsCharAlphaNumericW(jitter):
    user32_IsCharAlphaNumeric(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_IsCharLower(jitter, get_str, set_str):
    """
    BOOL IsCharLower(
        TCHAR ch
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["ch"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_IsCharLowerA(jitter):
    user32_IsCharLower(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_IsCharLowerW(jitter):
    user32_IsCharLower(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_IsCharUpper(jitter, get_str, set_str):
    """
    BOOL IsCharUpper(
        TCHAR ch
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["ch"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_IsCharUpperA(jitter):
    user32_IsCharUpper(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_IsCharUpperW(jitter):
    user32_IsCharUpper(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_LoadString(jitter, get_str, set_str):
    """
    int LoadString(
        HINSTANCE hInstance,
        UINT uID,
        LPTSTR lpBuffer,
        int nBufferMax
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hInstance", "uID", "lpBuffer", "nBufferMax"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_LoadStringA(jitter):
    user32_LoadString(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_LoadStringW(jitter):
    user32_LoadString(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_OemToChar(jitter, get_str, set_str):
    """
    BOOL OemToChar(
        LPCSTR lpszSrc,
        LPTSTR lpszDst
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpszSrc", "lpszDst"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_OemToCharA(jitter):
    user32_OemToChar(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_OemToCharW(jitter):
    user32_OemToChar(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_OemToCharBuff(jitter, get_str, set_str):
    """
    BOOL OemToCharBuff(
        LPCTSTR lpszSrc,
        LPTSTR lpszDst,
        DWORD cchDstLength
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpszSrc", "lpszDst", "cchDstLength"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_OemToCharBuffA(jitter):
    user32_OemToCharBuff(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_OemToCharBuffW(jitter):
    user32_OemToCharBuff(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_wsprintf(jitter, get_str, set_str):
    """
    int wsprintf(
        LPTSTR lpOut,
        LPCTSTR lpFmt,
        ...
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpOut", "lpFmt"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_wsprintfA(jitter):
    user32_wsprintf(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_wsprintfW(jitter):
    user32_wsprintf(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_wvsprintf(jitter, get_str, set_str):
    """
    int wvsprintf(
        LPTSTR lpOutput,
        LPCTSTR lpFmt,
        va_list arglist
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpOutput", "lpFmt", "arglist"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_wvsprintfA(jitter):
    user32_wvsprintf(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_wvsprintfW(jitter):
    user32_wvsprintf(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_MsgWaitForMultipleObjects(jitter):
    """
    [WAIT_RESULT] MsgWaitForMultipleObjects(
        DWORD nCount,
        const HANDLE* pHandles,
        BOOL bWaitAll,
        [WaitTimeout] dwMilliseconds,
        [QueueStatusFlag] dwWakeMask
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["nCount", "pHandles", "bWaitAll", "dwMilliseconds", "dwWakeMask"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_MsgWaitForMultipleObjectsEx(jitter):
    """
    [WAIT_RESULT] MsgWaitForMultipleObjectsEx(
        DWORD nCount,
        const HANDLE* pHandles,
        [WaitTimeout] dwMilliseconds,
        [QueueStatusFlag] dwWakeMask,
        [MsgWaitForMultipleObjectsFlags] dwFlags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["nCount", "pHandles", "dwMilliseconds", "dwWakeMask", "dwFlags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetKeyboardType(jitter):
    """
    int GetKeyboardType(
        int nTypeFlag
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["nTypeFlag"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetSysColor(jitter):
    """
    DWORD GetSysColor(
        [SysColorIndex] nIndex
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["nIndex"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetSystemMetrics(jitter):
    """
    int GetSystemMetrics(
        [SystemMetricIndex] nIndex
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["nIndex"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetSysColors(jitter):
    """
    BOOL SetSysColors(
        int cElements,
        const INT* lpaElements,
        const COLORREF* lpaRgbValues
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["cElements", "lpaElements", "lpaRgbValues"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SystemParametersInfo(jitter, get_str, set_str):
    """
    BOOL SystemParametersInfo(
        [SystemParametersInfoEnum] uiAction,
        UINT uiParam,
        PVOID pvParam,
        [SystemParametersInfoFlags] fWinIni
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["uiAction", "uiParam", "pvParam", "fWinIni"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SystemParametersInfoA(jitter):
    user32_SystemParametersInfo(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_SystemParametersInfoW(jitter):
    user32_SystemParametersInfo(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_KillTimer(jitter):
    """
    BOOL KillTimer(
        HWND hWnd,
        UINT_PTR uIDEvent
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "uIDEvent"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetCoalescableTimer(jitter):
    """
    UINT_PTR SetCoalescableTimer(
        HWND hwnd,
        UINT_PTR nIDEvent,
        UINT uElapse,
        TIMERPROC lpTimerFunc,
        [TIMERV_COALESCING] uToleranceDelay
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwnd", "nIDEvent", "uElapse", "lpTimerFunc", "uToleranceDelay"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetTimer(jitter):
    """
    UINT_PTR SetTimer(
        HWND hWnd,
        UINT_PTR nIDEvent,
        UINT uElapse,
        TIMERPROC lpTimerFunc
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "nIDEvent", "uElapse", "lpTimerFunc"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetClassInfo(jitter, get_str, set_str):
    """
    BOOL GetClassInfo(
        HINSTANCE hInstance,
        LPCTSTR lpClassName,
        LPWNDCLASS lpWndClass
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hInstance", "lpClassName", "lpWndClass"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetClassInfoA(jitter):
    user32_GetClassInfo(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_GetClassInfoW(jitter):
    user32_GetClassInfo(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_GetClassInfoEx(jitter, get_str, set_str):
    """
    BOOL GetClassInfoEx(
        HINSTANCE hinst,
        LPCTSTR lpszClass,
        LPWNDCLASSEX lpwcx
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hinst", "lpszClass", "lpwcx"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetClassInfoExA(jitter):
    user32_GetClassInfoEx(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_GetClassInfoExW(jitter):
    user32_GetClassInfoEx(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_GetClassLong(jitter, get_str, set_str):
    """
    DWORD GetClassLong(
        HWND hWnd,
        [ClassLongIndex] nIndex
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "nIndex"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetClassLongA(jitter):
    user32_GetClassLong(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_GetClassLongW(jitter):
    user32_GetClassLong(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_GetClassName(jitter, get_str, set_str):
    """
    int GetClassName(
        HWND hWnd,
        LPTSTR lpClassName,
        int nMaxCount
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "lpClassName", "nMaxCount"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetClassNameA(jitter):
    user32_GetClassName(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_GetClassNameW(jitter):
    user32_GetClassName(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_GetClassWord(jitter):
    """
    WORD GetClassWord(
        HWND hWnd,
        [ClassLongIndex] nIndex
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "nIndex"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetWindowLong(jitter, get_str, set_str):
    """
    LONG GetWindowLong(
        HWND hWnd,
        [WindowLongIndex] nIndex
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "nIndex"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetWindowLongA(jitter):
    user32_GetWindowLong(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_GetWindowLongW(jitter):
    user32_GetWindowLong(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_RegisterClass(jitter, get_str, set_str):
    """
    ATOM RegisterClass(
        CONST WNDCLASS* lpWndClass
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpWndClass"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_RegisterClassA(jitter):
    user32_RegisterClass(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_RegisterClassW(jitter):
    user32_RegisterClass(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_RegisterClassEx(jitter, get_str, set_str):
    """
    ATOM RegisterClassEx(
        CONST WNDCLASSEX* lpwcx
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpwcx"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_RegisterClassExA(jitter):
    user32_RegisterClassEx(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_RegisterClassExW(jitter):
    user32_RegisterClassEx(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_SetClassLong(jitter, get_str, set_str):
    """
    DWORD SetClassLong(
        HWND hWnd,
        [ClassLongIndex] nIndex,
        LONG dwNewLong
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "nIndex", "dwNewLong"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetClassLongA(jitter):
    user32_SetClassLong(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_SetClassLongW(jitter):
    user32_SetClassLong(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_SetClassWord(jitter):
    """
    WORD SetClassWord(
        HWND hWnd,
        [ClassLongIndex] nIndex,
        WORD wNewWord
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "nIndex", "wNewWord"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetWindowLong(jitter, get_str, set_str):
    """
    LONG SetWindowLong(
        HWND hWnd,
        [WindowLongIndex] nIndex,
        LONG dwNewLong
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "nIndex", "dwNewLong"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetWindowLongA(jitter):
    user32_SetWindowLong(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_SetWindowLongW(jitter):
    user32_SetWindowLong(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_UnregisterClass(jitter, get_str, set_str):
    """
    BOOL UnregisterClass(
        LPCTSTR lpClassName,
        HINSTANCE hInstance
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpClassName", "hInstance"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_UnregisterClassA(jitter):
    user32_UnregisterClass(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_UnregisterClassW(jitter):
    user32_UnregisterClass(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_CallWindowProc(jitter, get_str, set_str):
    """
    LRESULT CallWindowProc(
        WNDPROC lpPrevWndFunc,
        HWND hWnd,
        [WinMsg] Msg,
        WPARAM wParam,
        LPARAM lParam
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpPrevWndFunc", "hWnd", "Msg", "wParam", "lParam"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CallWindowProcA(jitter):
    user32_CallWindowProc(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_CallWindowProcW(jitter):
    user32_CallWindowProc(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_DefWindowProc(jitter, get_str, set_str):
    """
    LRESULT DefWindowProc(
        HWND hWnd,
        [WinMsg] Msg,
        WPARAM wParam,
        LPARAM lParam
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "Msg", "wParam", "lParam"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DefWindowProcA(jitter):
    user32_DefWindowProc(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_DefWindowProcW(jitter):
    user32_DefWindowProc(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_EnumProps(jitter, get_str, set_str):
    """
    int EnumProps(
        HWND hWnd,
        PROPENUMPROC lpEnumFunc
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "lpEnumFunc"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_EnumPropsA(jitter):
    user32_EnumProps(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_EnumPropsW(jitter):
    user32_EnumProps(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_EnumPropsEx(jitter, get_str, set_str):
    """
    int EnumPropsEx(
        HWND hWnd,
        PROPENUMPROCEX lpEnumFunc,
        LPARAM lParam
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "lpEnumFunc", "lParam"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_EnumPropsExA(jitter):
    user32_EnumPropsEx(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_EnumPropsExW(jitter):
    user32_EnumPropsEx(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_GetProp(jitter, get_str, set_str):
    """
    HANDLE GetProp(
        HWND hWnd,
        LPCTSTR lpString
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "lpString"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetPropA(jitter):
    user32_GetProp(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_GetPropW(jitter):
    user32_GetProp(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_RemoveProp(jitter, get_str, set_str):
    """
    HANDLE RemoveProp(
        HWND hWnd,
        LPCTSTR lpString
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "lpString"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_RemovePropA(jitter):
    user32_RemoveProp(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_RemovePropW(jitter):
    user32_RemoveProp(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_SetProp(jitter, get_str, set_str):
    """
    BOOL SetProp(
        HWND hWnd,
        LPCTSTR lpString,
        HANDLE hData
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "lpString", "hData"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetPropA(jitter):
    user32_SetProp(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_SetPropW(jitter):
    user32_SetProp(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_CloseWindowStation(jitter):
    """
    BOOL CloseWindowStation(
        HWINSTA hWinSta
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWinSta"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CreateWindowStation(jitter, get_str, set_str):
    """
    HWINSTA CreateWindowStation(
        LPCTSTR lpwinsta,
        [CreateWindowStationFlags] dwFlags,
        [WindowStationAccessRights] dwDesiredAccess,
        LPSECURITY_ATTRIBUTES lpsa
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpwinsta", "dwFlags", "dwDesiredAccess", "lpsa"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CreateWindowStationA(jitter):
    user32_CreateWindowStation(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_CreateWindowStationW(jitter):
    user32_CreateWindowStation(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_EnumWindowStations(jitter, get_str, set_str):
    """
    BOOL EnumWindowStations(
        WINSTAENUMPROC lpEnumFunc,
        LPARAM lParam
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpEnumFunc", "lParam"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_EnumWindowStationsA(jitter):
    user32_EnumWindowStations(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_EnumWindowStationsW(jitter):
    user32_EnumWindowStations(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_GetProcessWindowStation(jitter):
    """
    HWINSTA GetProcessWindowStation()
    """
    ret_ad, args = jitter.func_args_stdcall([])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetUserObjectInformation(jitter, get_str, set_str):
    """
    BOOL GetUserObjectInformation(
        HANDLE hObj,
        [UserObjectInformationEnum] nIndex,
        PVOID pvInfo,
        DWORD nLength,
        LPDWORD lpnLengthNeeded
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hObj", "nIndex", "pvInfo", "nLength", "lpnLengthNeeded"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetUserObjectInformationA(jitter):
    user32_GetUserObjectInformation(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_GetUserObjectInformationW(jitter):
    user32_GetUserObjectInformation(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_OpenWindowStation(jitter, get_str, set_str):
    """
    HWINSTA OpenWindowStation(
        LPTSTR lpszWinSta,
        BOOL fInherit,
        [WindowStationAccessRights] dwDesiredAccess
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpszWinSta", "fInherit", "dwDesiredAccess"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_OpenWindowStationA(jitter):
    user32_OpenWindowStation(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_OpenWindowStationW(jitter):
    user32_OpenWindowStation(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_SetProcessWindowStation(jitter):
    """
    BOOL SetProcessWindowStation(
        HWINSTA hWinSta
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWinSta"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CloseDesktop(jitter):
    """
    BOOL CloseDesktop(
        HDESK hDesktop
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hDesktop"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CreateDesktop(jitter, get_str, set_str):
    """
    HDESK CreateDesktop(
        LPCTSTR lpszDesktop,
        LPCTSTR lpszDevice,
        LPDEVMODE pDevmode,
        [DesktopFlags] dwFlags,
        [DESKTOP_ACCESS_MASK] dwDesiredAccess,
        LPSECURITY_ATTRIBUTES lpsa
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpszDesktop", "lpszDevice", "pDevmode", "dwFlags", "dwDesiredAccess", "lpsa"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CreateDesktopA(jitter):
    user32_CreateDesktop(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_CreateDesktopW(jitter):
    user32_CreateDesktop(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_CreateDesktopEx(jitter, get_str, set_str):
    """
    HDESK CreateDesktopEx(
        LPCTSTR lpszDesktop,
        LPCTSTR lpszDevice,
        LPDEVMODE pDevmode,
        [DesktopFlags] dwFlags,
        [DESKTOP_ACCESS_MASK] dwDesiredAccess,
        LPSECURITY_ATTRIBUTES lpsa,
        ULONG ulHeapSize,
        PVOID pvoid
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpszDesktop", "lpszDevice", "pDevmode", "dwFlags", "dwDesiredAccess", "lpsa", "ulHeapSize", "pvoid"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CreateDesktopExA(jitter):
    user32_CreateDesktopEx(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_CreateDesktopExW(jitter):
    user32_CreateDesktopEx(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_EnumDesktops(jitter, get_str, set_str):
    """
    BOOL EnumDesktops(
        HWINSTA hwinsta,
        DESKTOPENUMPROC lpEnumFunc,
        LPARAM lParam
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwinsta", "lpEnumFunc", "lParam"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_EnumDesktopsA(jitter):
    user32_EnumDesktops(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_EnumDesktopsW(jitter):
    user32_EnumDesktops(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_EnumDesktopWindows(jitter):
    """
    BOOL EnumDesktopWindows(
        HDESK hDesktop,
        WNDENUMPROC lpfn,
        LPARAM lParam
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hDesktop", "lpfn", "lParam"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetThreadDesktop(jitter):
    """
    HDESK GetThreadDesktop(
        DWORD dwThreadId
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["dwThreadId"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_OpenDesktop(jitter, get_str, set_str):
    """
    HDESK OpenDesktop(
        LPTSTR lpszDesktop,
        [DesktopFlags] dwFlags,
        BOOL fInherit,
        [DESKTOP_ACCESS_MASK] dwDesiredAccess
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["lpszDesktop", "dwFlags", "fInherit", "dwDesiredAccess"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_OpenDesktopA(jitter):
    user32_OpenDesktop(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_OpenDesktopW(jitter):
    user32_OpenDesktop(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_OpenInputDesktop(jitter):
    """
    HDESK OpenInputDesktop(
        [DesktopFlags] dwFlags,
        BOOL fInherit,
        [DESKTOP_ACCESS_MASK] dwDesiredAccess
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["dwFlags", "fInherit", "dwDesiredAccess"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetThreadDesktop(jitter):
    """
    BOOL SetThreadDesktop(
        HDESK hDesktop
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hDesktop"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetUserObjectInformation(jitter, get_str, set_str):
    """
    BOOL SetUserObjectInformation(
        HANDLE hObj,
        [UserObjectInformationEnum] nIndex,
        PVOID pvInfo,
        DWORD nLength
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hObj", "nIndex", "pvInfo", "nLength"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetUserObjectInformationA(jitter):
    user32_SetUserObjectInformation(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_SetUserObjectInformationW(jitter):
    user32_SetUserObjectInformation(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_SwitchDesktop(jitter):
    """
    BOOL SwitchDesktop(
        HDESK hDesktop
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hDesktop"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetMenuContextHelpId(jitter):
    """
    DWORD GetMenuContextHelpId(
        HMENU hmenu
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hmenu"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetWindowContextHelpId(jitter):
    """
    DWORD GetWindowContextHelpId(
        HWND hwnd
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwnd"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetMenuContextHelpId(jitter):
    """
    BOOL SetMenuContextHelpId(
        HMENU hmenu,
        DWORD dwContextHelpId
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hmenu", "dwContextHelpId"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetWindowContextHelpId(jitter):
    """
    BOOL SetWindowContextHelpId(
        HWND hwnd,
        DWORD dwContextHelpId
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwnd", "dwContextHelpId"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_WinHelp(jitter, get_str, set_str):
    """
    BOOL WinHelp(
        HWND hWndMain,
        LPCTSTR lpszHelp,
        UINT uCommand,
        ULONG_PTR dwData
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWndMain", "lpszHelp", "uCommand", "dwData"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_WinHelpA(jitter):
    user32_WinHelp(jitter, lambda addr:get_win_str_a(jitter, addr), lambda addr,value: set_win_str_a(jitter, addr, value))

def user32_WinHelpW(jitter):
    user32_WinHelp(jitter, lambda addr:get_win_str_w(jitter, addr), lambda addr,value: set_win_str_w(jitter, addr, value))

def user32_GetUserObjectSecurity(jitter):
    """
    BOOL GetUserObjectSecurity(
        HANDLE hObj,
        PSECURITY_INFORMATION pSIRequested,
        PSECURITY_DESCRIPTOR pSD,
        DWORD nLength,
        LPDWORD lpnLengthNeeded
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hObj", "pSIRequested", "pSD", "nLength", "lpnLengthNeeded"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetUserObjectSecurity(jitter):
    """
    BOOL SetUserObjectSecurity(
        HANDLE hObj,
        PSECURITY_INFORMATION pSIRequested,
        PSECURITY_DESCRIPTOR pSID
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hObj", "pSIRequested", "pSID"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetWinEventHook(jitter):
    """
    HWINEVENTHOOK SetWinEventHook(
        UINT eventMin,
        UINT eventMax,
        HMODULE hmodWinEventProc,
        WINEVENTPROC lpfnWinEventProc,
        DWORD idProcess,
        DWORD idThread,
        [WinEventFlags] dwflags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["eventMin", "eventMax", "hmodWinEventProc", "lpfnWinEventProc", "idProcess", "idThread", "dwflags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_UnhookWinEvent(jitter):
    """
    BOOL UnhookWinEvent(
        HWINEVENTHOOK hWinEventHook
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWinEventHook"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_IsWinEventHookInstalled(jitter):
    """
    BOOL IsWinEventHookInstalled(
        DWORD event
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["event"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_NotifyWinEvent(jitter):
    """
    void NotifyWinEvent(
        DWORD event,
        HWND hwnd,
        [ObjectIdEnum] idObject,
        LONG idChild
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["event", "hwnd", "idObject", "idChild"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CloseTouchInputHandle(jitter):
    """
    BOOL CloseTouchInputHandle(
        HTOUCHINPUT hTouchInput
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hTouchInput"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetTouchInputInfo(jitter):
    """
    BOOL GetTouchInputInfo(
        HTOUCHINPUT hTouchInput,
        UINT cInputs,
        PTOUCHINPUT pInputs,
        int cbSize
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hTouchInput", "cInputs", "pInputs", "cbSize"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_IsTouchWindow(jitter):
    """
    BOOL IsTouchWindow(
        HWND hWnd,
        PULONG pulFlags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "pulFlags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_RegisterTouchWindow(jitter):
    """
    BOOL RegisterTouchWindow(
        HWND hWnd,
        ULONG ulFlags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd", "ulFlags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_UnregisterTouchWindow(jitter):
    """
    BOOL UnregisterTouchWindow(
        HWND hWnd
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hWnd"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CloseGestureInfoHandle(jitter):
    """
    BOOL CloseGestureInfoHandle(
        HGESTUREINFO hGestureInfo
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hGestureInfo"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetGestureExtraArgs(jitter):
    """
    BOOL GetGestureExtraArgs(
        HGESTUREINFO hGestureInfo,
        UINT cbExtraArgs,
        PBYTE pExtraArgs
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hGestureInfo", "cbExtraArgs", "pExtraArgs"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetGestureInfo(jitter):
    """
    BOOL GetGestureInfo(
        HGESTUREINFO hGestureInfo,
        PGESTUREINFO pGestureInfo
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hGestureInfo", "pGestureInfo"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetGestureConfig(jitter):
    """
    BOOL GetGestureConfig(
        HWND hwnd,
        DWORD dwReserved,
        DWORD dwFlags,
        PUINT pcIDs,
        PGESTURECONFIG pGestureConfig,
        UINT cbSize
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwnd", "dwReserved", "dwFlags", "pcIDs", "pGestureConfig", "cbSize"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetGestureConfig(jitter):
    """
    BOOL SetGestureConfig(
        HWND hwnd,
        DWORD dwReserved,
        UINT cIDs,
        PGESTURECONFIG pGestureConfig,
        UINT cbSize
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwnd", "dwReserved", "cIDs", "pGestureConfig", "cbSize"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DesktopHasWatermarkText(jitter):
    """
    BOOL DesktopHasWatermarkText()
    """
    ret_ad, args = jitter.func_args_stdcall([])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_FrostCrashedWindow(jitter):
    """
    HWND FrostCrashedWindow(
        HWND hwndToReplace,
        HWND hwndErrorReportOwnerWnd
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwndToReplace", "hwndErrorReportOwnerWnd"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetSendMessageReceiver(jitter):
    """
    HWND GetSendMessageReceiver(
        DWORD threadId
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["threadId"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetWindowCompositionAttribute(jitter):
    """
    BOOL GetWindowCompositionAttribute(
        HWND hwnd,
        WINCOMPATTRDATA* pAttrData
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwnd", "pAttrData"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetWindowMinimizeRect(jitter):
    """
    BOOL GetWindowMinimizeRect(
        HWND hwndToQuery,
        RECT* pRect
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwndToQuery", "pRect"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GhostWindowFromHungWindow(jitter):
    """
    HWND GhostWindowFromHungWindow(
        HWND hwndGhost
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwndGhost"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_HungWindowFromGhostWindow(jitter):
    """
    HWND HungWindowFromGhostWindow(
        HWND hwndGhost
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwndGhost"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_IsSETEnabled(jitter):
    """
    BOOL IsSETEnabled()
    """
    ret_ad, args = jitter.func_args_stdcall([])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_IsServerSideWindow(jitter):
    """
    BOOL IsServerSideWindow(
        HWND hwnd
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwnd"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_IsThreadDesktopComposited(jitter):
    """
    BOOL IsThreadDesktopComposited()
    """
    ret_ad, args = jitter.func_args_stdcall([])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_IsWindowInDestroy(jitter):
    """
    BOOL IsWindowInDestroy(
        HWND hwnd
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwnd"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_MB_GetString(jitter):
    """
    LPCWSTR MB_GetString(
        int strId
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["strId"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_NtUserSetChildWindowNoActivate(jitter):
    """
    BOOL NtUserSetChildWindowNoActivate(
        HWND hwndChild
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwndChild"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_QuerySendMessage(jitter):
    """
    BOOL QuerySendMessage(
        MSG* pMsg
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["pMsg"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetWindowCompositionAttribute(jitter):
    """
    BOOL SetWindowCompositionAttribute(
        HWND hwnd,
        WINCOMPATTRDATA* pAttrData
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwnd", "pAttrData"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_UpdateWindowTransform(jitter):
    """
    BOOL UpdateWindowTransform(
        HWND hwnd,
        D3DMATRIX* pMatrix,
        DWORD unk
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwnd", "pMatrix", "unk"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_InitializeTouchInjection(jitter):
    """
    BOOL InitializeTouchInjection(
        UINT32 maxCount,
        [TOUCH_FEEDBACK_MODE] dwMode
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["maxCount", "dwMode"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_InjectTouchInput(jitter):
    """
    BOOL InjectTouchInput(
        UINT32 count,
        const POINTER_TOUCH_INFO* contacts
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["count", "contacts"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_AddPointerInteractionContext(jitter):
    """
    HRESULT AddPointerInteractionContext(
        HINTERACTIONCONTEXT interactionContext,
        UINT32 pointerId
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["interactionContext", "pointerId"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_BufferPointerPacketsInteractionContext(jitter):
    """
    HRESULT BufferPointerPacketsInteractionContext(
        HINTERACTIONCONTEXT interactionContext,
        UINT32 entriesCount,
        const POINTER_INFO* pointerInfo
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["interactionContext", "entriesCount", "pointerInfo"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_CreateInteractionContext(jitter):
    """
    HRESULT CreateInteractionContext(
        HINTERACTIONCONTEXT* interactionContext
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["interactionContext"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_DestroyInteractionContext(jitter):
    """
    HRESULT DestroyInteractionContext(
        HINTERACTIONCONTEXT interactionContext
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["interactionContext"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetCrossSlideParameterInteractionContext(jitter):
    """
    HRESULT GetCrossSlideParameterInteractionContext(
        HINTERACTIONCONTEXT interactionContext,
        CROSS_SLIDE_THRESHOLD threshold,
        float* distance
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["interactionContext", "threshold", "distance"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetInertiaParameterInteractionContext(jitter):
    """
    HRESULT GetInertiaParameterInteractionContext(
        HINTERACTIONCONTEXT interactionContext,
        INERTIA_PARAMETER inertiaParameter,
        float* value
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["interactionContext", "inertiaParameter", "value"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetInteractionConfigurationInteractionContext(jitter):
    """
    HRESULT GetInteractionConfigurationInteractionContext(
        HINTERACTIONCONTEXT interactionContext,
        UINT32 configurationCount,
        INTERACTION_CONTEXT_CONFIGURATION* configuration
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["interactionContext", "configurationCount", "configuration"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetMouseWheelParameterInteractionContext(jitter):
    """
    HRESULT GetMouseWheelParameterInteractionContext(
        HINTERACTIONCONTEXT interactionContext,
        MOUSE_WHEEL_PARAMETER parameter,
        float* value
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["interactionContext", "parameter", "value"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetPropertyInteractionContext(jitter):
    """
    HRESULT GetPropertyInteractionContext(
        HINTERACTIONCONTEXT interactionContext,
        INTERACTION_CONTEXT_PROPERTY contextProperty,
        UINT32* value
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["interactionContext", "contextProperty", "value"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetStateInteractionContext(jitter):
    """
    HRESULT GetStateInteractionContext(
        HINTERACTIONCONTEXT interactionContext,
        const POINTER_INFO* pointerInfo,
        INTERACTION_STATE* state
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["interactionContext", "pointerInfo", "state"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_ProcessBufferedPacketsInteractionContext(jitter):
    """
    HRESULT ProcessBufferedPacketsInteractionContext(
        HINTERACTIONCONTEXT interactionContext
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["interactionContext"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_ProcessInertiaInteractionContext(jitter):
    """
    HRESULT ProcessInertiaInteractionContext(
        HINTERACTIONCONTEXT interactionContext
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["interactionContext"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_ProcessPointerFramesInteractionContext(jitter):
    """
    HRESULT ProcessPointerFramesInteractionContext(
        HINTERACTIONCONTEXT interactionContext,
        UINT32 entriesCount,
        UINT32 pointerCount,
        const POINTER_INFO* pointerInfo
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["interactionContext", "entriesCount", "pointerCount", "pointerInfo"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_RegisterOutputCallbackInteractionContext(jitter):
    """
    HRESULT RegisterOutputCallbackInteractionContext(
        HINTERACTIONCONTEXT interactionContext,
        INTERACTION_CONTEXT_OUTPUT_CALLBACK outputCallback,
        void* clientData
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["interactionContext", "outputCallback", "clientData"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_RemovePointerInteractionContext(jitter):
    """
    HRESULT RemovePointerInteractionContext(
        HINTERACTIONCONTEXT interactionContext,
        UINT32 pointerId
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["interactionContext", "pointerId"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_ResetInteractionContext(jitter):
    """
    HRESULT ResetInteractionContext(
        HINTERACTIONCONTEXT interactionContext
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["interactionContext"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetCrossSlideParametersInteractionContext(jitter):
    """
    HRESULT SetCrossSlideParametersInteractionContext(
        HINTERACTIONCONTEXT interactionContext,
        UINT32 parameterCount,
        CROSS_SLIDE_PARAMETER* crossSlideParameters
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["interactionContext", "parameterCount", "crossSlideParameters"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetInertiaParameterInteractionContext(jitter):
    """
    HRESULT SetInertiaParameterInteractionContext(
        HINTERACTIONCONTEXT interactionContext,
        INERTIA_PARAMETER inertiaParameter,
        float value
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["interactionContext", "inertiaParameter", "value"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetInteractionConfigurationInteractionContext(jitter):
    """
    HRESULT SetInteractionConfigurationInteractionContext(
        HINTERACTIONCONTEXT interactionContext,
        UINT32 configurationCount,
        const INTERACTION_CONTEXT_CONFIGURATION* configuration
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["interactionContext", "configurationCount", "configuration"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetMouseWheelParameterInteractionContext(jitter):
    """
    HRESULT SetMouseWheelParameterInteractionContext(
        HINTERACTIONCONTEXT interactionContext,
        MOUSE_WHEEL_PARAMETER parameter,
        float value
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["interactionContext", "parameter", "value"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetPivotInteractionContext(jitter):
    """
    HRESULT SetPivotInteractionContext(
        HINTERACTIONCONTEXT interactionContext,
        float x,
        float y,
        float radius
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["interactionContext", "x", "y", "radius"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetPropertyInteractionContext(jitter):
    """
    HRESULT SetPropertyInteractionContext(
        HINTERACTIONCONTEXT interactionContext,
        INTERACTION_CONTEXT_PROPERTY contextProperty,
        UINT32 value
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["interactionContext", "contextProperty", "value"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_StopInteractionContext(jitter):
    """
    HRESULT StopInteractionContext(
        HINTERACTIONCONTEXT interactionContext
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["interactionContext"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_EnableMouseInPointer(jitter):
    """
    BOOL EnableMouseInPointer(
        BOOL fEnable
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["fEnable"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetPointerCursorId(jitter):
    """
    BOOL GetPointerCursorId(
        UINT32 pointerId,
        UINT32* cursorId
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["pointerId", "cursorId"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetPointerFrameInfo(jitter):
    """
    BOOL GetPointerFrameInfo(
        UINT32 pointerId,
        UINT32* pointerCount,
        POINTER_INFO* pointerInfo
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["pointerId", "pointerCount", "pointerInfo"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetPointerFrameInfoHistory(jitter):
    """
    BOOL GetPointerFrameInfoHistory(
        UINT32 pointerId,
        UINT32* entriesCount,
        UINT32* pointerCount,
        POINTER_INFO* pointerInfo
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["pointerId", "entriesCount", "pointerCount", "pointerInfo"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetPointerFramePenInfo(jitter):
    """
    BOOL GetPointerFramePenInfo(
        UINT32 pointerId,
        UINT32* pointerCount,
        POINTER_PEN_INFO* penInfo
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["pointerId", "pointerCount", "penInfo"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetPointerFramePenInfoHistory(jitter):
    """
    BOOL GetPointerFramePenInfoHistory(
        UINT32 pointerId,
        UINT32* entriesCount,
        UINT32* pointerCount,
        POINTER_PEN_INFO* penInfo
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["pointerId", "entriesCount", "pointerCount", "penInfo"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetPointerFrameTouchInfo(jitter):
    """
    BOOL GetPointerFrameTouchInfo(
        UINT32 pointerId,
        UINT32* pointerCount,
        POINTER_TOUCH_INFO* touchInfo
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["pointerId", "pointerCount", "touchInfo"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetPointerFrameTouchInfoHistory(jitter):
    """
    BOOL GetPointerFrameTouchInfoHistory(
        UINT32 pointerId,
        UINT32* entriesCount,
        UINT32* pointerCount,
        POINTER_TOUCH_INFO* touchInfo
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["pointerId", "entriesCount", "pointerCount", "touchInfo"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetPointerInfo(jitter):
    """
    BOOL GetPointerInfo(
        UINT32 pointerId,
        POINTER_INFO* pointerInfo
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["pointerId", "pointerInfo"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetPointerInfoHistory(jitter):
    """
    BOOL GetPointerInfoHistory(
        UINT32 pointerId,
        UINT32* entriesCount,
        POINTER_INFO* pointerInfo
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["pointerId", "entriesCount", "pointerInfo"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetPointerPenInfo(jitter):
    """
    BOOL GetPointerPenInfo(
        UINT32 pointerId,
        POINTER_PEN_INFO* penInfo
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["pointerId", "penInfo"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetPointerPenInfoHistory(jitter):
    """
    BOOL GetPointerPenInfoHistory(
        UINT32 pointerId,
        UINT32* entriesCount,
        POINTER_PEN_INFO* penInfo
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["pointerId", "entriesCount", "penInfo"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetPointerTouchInfo(jitter):
    """
    BOOL GetPointerTouchInfo(
        UINT32 pointerId,
        POINTER_TOUCH_INFO* touchInfo
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["pointerId", "touchInfo"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetPointerTouchInfoHistory(jitter):
    """
    BOOL GetPointerTouchInfoHistory(
        UINT32 pointerId,
        UINT32* entriesCount,
        POINTER_TOUCH_INFO* touchInfo
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["pointerId", "entriesCount", "touchInfo"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetPointerType(jitter):
    """
    BOOL GetPointerType(
        UINT32 pointerId,
        POINTER_INPUT_TYPE* pointerType
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["pointerId", "pointerType"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetUnpredictedMessagePos(jitter):
    """
    DWORD GetUnpredictedMessagePos()
    """
    ret_ad, args = jitter.func_args_stdcall([])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_IsMouseInPointerEnabled(jitter):
    """
    BOOL IsMouseInPointerEnabled()
    """
    ret_ad, args = jitter.func_args_stdcall([])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SkipPointerFrameMessages(jitter):
    """
    BOOL SkipPointerFrameMessages(
        UINT32 pointerId
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["pointerId"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_EvaluateProximityToPolygon(jitter):
    """
    BOOL EvaluateProximityToPolygon(
        UINT32 numVertices,
        const POINT* controlPolygon,
        const TOUCH_HIT_TESTING_INPUT* pHitTestingInput,
        TOUCH_HIT_TESTING_PROXIMITY_EVALUATION* pProximityEval
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["numVertices", "controlPolygon", "pHitTestingInput", "pProximityEval"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_EvaluateProximityToRect(jitter):
    """
    BOOL EvaluateProximityToRect(
        const RECT* controlBoundingBox,
        const TOUCH_HIT_TESTING_INPUT* pHitTestingInput,
        TOUCH_HIT_TESTING_PROXIMITY_EVALUATION* pProximityEval
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["controlBoundingBox", "pHitTestingInput", "pProximityEval"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_PackTouchHitTestingProximityEvaluation(jitter):
    """
    LRESULT PackTouchHitTestingProximityEvaluation(
        const TOUCH_HIT_TESTING_INPUT* pHitTestingInput,
        const TOUCH_HIT_TESTING_PROXIMITY_EVALUATION* pProximityEval
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["pHitTestingInput", "pProximityEval"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_RegisterTouchHitTestingWindow(jitter):
    """
    BOOL RegisterTouchHitTestingWindow(
        HWND hwnd,
        ULONG value
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwnd", "value"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetCIMSSM(jitter):
    """
    BOOL GetCIMSSM(
        INPUT_MESSAGE_SOURCE* inputMessageSource
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["inputMessageSource"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetCurrentInputMessageSource(jitter):
    """
    BOOL GetCurrentInputMessageSource(
        INPUT_MESSAGE_SOURCE* inputMessageSource
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["inputMessageSource"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetPointerDevice(jitter):
    """
    BOOL GetPointerDevice(
        HANDLE device,
        POINTER_DEVICE_INFO* pointerDevice
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["device", "pointerDevice"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetPointerDeviceCursors(jitter):
    """
    BOOL GetPointerDeviceCursors(
        HANDLE device,
        UINT32* cursorCount,
        POINTER_DEVICE_CURSOR_INFO* deviceCursors
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["device", "cursorCount", "deviceCursors"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetPointerDeviceProperties(jitter):
    """
    BOOL GetPointerDeviceProperties(
        HANDLE device,
        UINT32* propertyCount,
        POINTER_DEVICE_PROPERTY* pointerProperties
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["device", "propertyCount", "pointerProperties"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetPointerDeviceRects(jitter):
    """
    BOOL GetPointerDeviceRects(
        HANDLE device,
        RECT* pointerDeviceRect,
        RECT* displayRect
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["device", "pointerDeviceRect", "displayRect"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetPointerDevices(jitter):
    """
    BOOL GetPointerDevices(
        UINT32 deviceCount,
        POINTER_DEVICE_INFO* pointerDevices
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["deviceCount", "pointerDevices"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetRawPointerDeviceData(jitter):
    """
    BOOL GetRawPointerDeviceData(
        UINT32 pointerId,
        UINT32 historyCount,
        UINT32 propertiesCount,
        POINTER_DEVICE_PROPERTY* pProperties,
        LONG* pValues
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["pointerId", "historyCount", "propertiesCount", "pProperties", "pValues"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_RegisterPointerDeviceNotifications(jitter):
    """
    BOOL RegisterPointerDeviceNotifications(
        HWND window,
        BOOL notifyRange
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["window", "notifyRange"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_RegisterSuspendResumeNotification(jitter):
    """
    HPOWERNOTIFY RegisterSuspendResumeNotification(
        PDEVICE_NOTIFY_SUBSCRIBE_PARAMETERS hRecipient,
        [POWER_NOTIFICATION_FLAGS] Flags
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hRecipient", "Flags"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_UnregisterSuspendResumeNotification(jitter):
    """
    BOOL UnregisterSuspendResumeNotification(
        HPOWERNOTIFY RegistrationHandle
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["RegistrationHandle"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_GetWindowFeedbackSetting(jitter):
    """
    BOOL GetWindowFeedbackSetting(
        HWND hwnd,
        FEEDBACK_TYPE feedback,
        [GWFS_FLAGS] dwFlags,
        UINT32* pSize,
        VOID* config
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwnd", "feedback", "dwFlags", "pSize", "config"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)

def user32_SetWindowFeedbackSetting(jitter):
    """
    BOOL SetWindowFeedbackSetting(
        HWND hwnd,
        FEEDBACK_TYPE feedback,
        DWORD dwFlags,
        UINT32 size,
        const VOID* configuration
    )
    """
    ret_ad, args = jitter.func_args_stdcall(["hwnd", "feedback", "dwFlags", "size", "configuration"])
    raise RuntimeError('API not implemented')
    jitter.func_ret_stdcall(ret_ad, ret_value)
